{"version":3,"sources":["Pages/home.jsx"],"names":["Banner","loadable","TopNFT","HallOfFrame","Collections","Info","HallOfFrameInfo","Home","props","setCookie","dashboard","cookies","expire","Date","now","expiryTime","set","path","expires","state","loading","get","a","window","scrollTo","this","setDashboard","getDashboard","MainSection","className","map","data","index","name","isActive","React","Component","Gs","styled","withCookies","connect","fetchDashboard","dispatch","actions","fetchDashboardConfig","type"],"mappings":"yRAYMA,EAASC,aAAS,kBAAM,iEACxBC,EAASD,aAAS,kBAAM,8EACxBE,EAAcF,aAAS,kBAAM,wEAC7BG,EAAcH,aAAS,kBAAM,yDAC7BI,EAAOJ,aAAS,kBAAM,yDACtBK,EAAkBL,aAAS,kBAAM,yDAGjCM,E,kDAMF,WAAYC,GAAQ,IAAD,uBACf,cAAMA,IAyBVC,UAAY,SAACC,GACT,IAAQC,EAAY,EAAKH,MAAjBG,QACFC,EAAS,IAAIC,KAAKA,KAAKC,MAAsB,GAAbC,IAAkB,GAAK,KAC7DJ,EAAQK,IAAI,YAAaN,EAAW,CAAEO,KAAM,IAAKC,QAASN,KA3B1D,IAAQD,EAAYH,EAAZG,QAFO,OAGf,EAAKQ,MAAQ,CACTC,SAAS,EACTV,UAAWC,EAAQU,IAAI,cAAgB,MAL5B,E,4FASnB,gCAAAC,EAAA,sDACIC,OAAOC,SAAS,EAAG,GADvB,EAEmCC,KAAKjB,MAA5BE,EAFZ,EAEYA,UAAWC,EAFvB,EAEuBA,QACdc,KAAKN,MAAMT,WAAcA,EAG1Be,KAAKjB,MAAMkB,aAAaf,EAAQU,IAAI,cAFpCI,KAAKjB,MAAMmB,eAJnB,gD,sFAUA,WACI,MAA+BF,KAAKjB,MAA5BE,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,QACfD,IAAcC,EAAQU,IAAI,cAC1BI,KAAKhB,UAAUC,K,oBAWvB,WACI,OACI,cAAC,IAAGkB,YAAJ,CAAgBC,UAAU,OAA1B,SACI,cAAC,IAAD,UACKJ,KAAKjB,MAAME,UACRe,KAAKjB,MAAME,UAAUoB,KAAI,SAACC,EAAMC,GAC5B,MAAkB,WAAdD,EAAKE,MAAqBF,EAAKG,SACxB,cAAClC,EAAD,GAAagC,GACC,YAAdD,EAAKE,MAAsBF,EAAKG,SAChC,cAAChC,EAAD,GAAa8B,GACC,kBAAdD,EAAKE,MAA4BF,EAAKG,SACtC,cAAC/B,EAAD,GAAkB6B,GACJ,kBAAdD,EAAKE,MAA6BF,EAAKG,SAEzB,gBAAdH,EAAKE,MAA0BF,EAAKG,SACpC,cAAC9B,EAAD,GAAkB4B,GACJ,SAAdD,EAAKE,MAAmBF,EAAKG,SAC7B,cAAC7B,EAAD,GAAW2B,GAEX,GANA,cAAC1B,EAAD,GAAsB0B,MASnC,kB,GA7DPG,IAAMC,WAoEzBC,IAAGT,YAAcU,YAAOD,IAAGT,YAAVU,CAAjB,iEAmBeC,sBAAYC,aANH,SAACrB,GACrB,MAAO,CACHT,UAAWS,EAAMsB,mBATC,SAACC,GACvB,MAAO,CACHf,aAAc,kBAAMe,EAASC,IAAQC,yBACrClB,aAAc,SAACK,GAAD,OAAUW,EAAS,CAAEG,KAAM,oBAAqBd,KAAMA,QAUjDS,CAA4CjC","file":"static/js/48.f7d7693d.chunk.js","sourcesContent":["import React from 'react';\nimport loadable from '@loadable/component'\nimport { connect } from 'react-redux';\nimport { instanceOf } from 'prop-types';\nimport LazyLoad from \"react-lazyload\";\nimport { withCookies, Cookies } from 'react-cookie';\nimport Gs from '../Theme/globalStyles';\n\nimport { actions } from '../actions';\nimport { expiryTime } from '../config';\nimport styled from \"styled-components\";\n\nconst Banner = loadable(() => import('../Component/home/banner'))\nconst TopNFT = loadable(() => import('../Component/home/topNFT'))\nconst HallOfFrame = loadable(() => import('../Component/home/hall.frame'))\nconst Collections = loadable(() => import('../Component/home/collection'))\nconst Info = loadable(() => import('../Component/home/info'))\nconst HallOfFrameInfo = loadable(() => import('../Component/home/hall.frame.info'))\n\n\nclass Home extends React.Component {\n\n    static propTypes = {\n        cookies: instanceOf(Cookies).isRequired\n    }\n\n    constructor(props) {\n        super(props);\n        const { cookies } = props;\n        this.state = {\n            loading: false,\n            dashboard: cookies.get('dashboard') || null,\n        }\n    }\n\n    async componentDidMount() {\n        window.scrollTo(0, 0);\n        const { dashboard, cookies } = this.props;\n        if (!this.state.dashboard && !dashboard) {\n            this.props.getDashboard() // fetch dashboard config\n        } else {\n            this.props.setDashboard(cookies.get('dashboard'))\n        }\n    }\n\n    componentDidUpdate() {\n        const { dashboard, cookies } = this.props\n        if (dashboard && !cookies.get('dashboard')) {\n            this.setCookie(dashboard) // set dashboard data in cookie\n        }\n    }\n\n    setCookie = (dashboard) => {\n        const { cookies } = this.props;\n        const expire = new Date(Date.now() + (expiryTime * 60 * 60 * 1000)) // cookie will expire after 12 hours\n        cookies.set('dashboard', dashboard, { path: '/', expires: expire });\n    }\n\n\n    render() {\n        return (\n            <Gs.MainSection className=\"mt-0\">\n                <LazyLoad>\n                    {this.props.dashboard ?\n                        this.props.dashboard.map((data, index) => {\n                            if (data.name === 'Banner' && data.isActive) {\n                                return <Banner key={index} />\n                            } else if (data.name === 'Top Nft' && data.isActive) {\n                                return <TopNFT key={index} />\n                            } else if (data.name === 'Hall Of Frame' && data.isActive) {\n                                return <HallOfFrame key={index} />\n                            } else if (data.name === 'Hall Of Frame' && !data.isActive) {\n                                return <HallOfFrameInfo key={index} />\n                            } else if (data.name === 'Collections' && data.isActive) {\n                                return <Collections key={index} />\n                            } else if (data.name === 'Info' && data.isActive) {\n                                return <Info key={index} />\n                            } else {\n                                return ''\n                            }\n                        })\n                        : 'loading'}\n                </LazyLoad>\n            </Gs.MainSection>\n        )\n    }\n}\n\nGs.MainSection = styled(Gs.MainSection)`\n  &.mt-0{\n    margin-top:0px;\n  }\n`;\n\nconst mapDipatchToProps = (dispatch) => {\n    return {\n        getDashboard: () => dispatch(actions.fetchDashboardConfig()),\n        setDashboard: (data) => dispatch({ type: 'FETCHED_DASHBOARD', data: data })\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        dashboard: state.fetchDashboard,\n    }\n}\n\nexport default withCookies(connect(mapStateToProps, mapDipatchToProps)(Home));"],"sourceRoot":""}