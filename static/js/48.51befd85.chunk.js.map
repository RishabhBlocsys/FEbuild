{"version":3,"sources":["Component/lang.switch.jsx"],"names":["connect","dispatch","setLanguage","lng","actions","props","context","useContext","Context","wrapperRef","useRef","useState","toggle","setToggle","header","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","localStorage","getItem","selectLanguage","onClick","setItem","FlexDiv","styled","div","LanBTN","Media","md","DDContainer","DDBtnbar01","LanBTNF","sm","DDContainerF","DDBtnbar01F","ref","className","id","defaultMessage","isOpen","locale","includes"],"mappings":"4NA2ReA,sBAAQ,MANG,SAACC,GACzB,MAAO,CACLC,YAAa,SAACC,GAAD,OAASF,EAASG,IAAQF,YAAYC,QAIxCH,EAjRE,SAACK,GAChB,IAAMC,EAAUC,qBAAWC,KACrBC,EAAaC,iBAAO,MAC1B,EAA4BC,oBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KACMC,EAAST,EAAMS,OAErBC,qBAAU,WAIR,SAASC,EAAmBC,GAExBR,GACAA,EAAWS,UACVT,EAAWS,QAAQC,SAASF,EAAMG,SAE/BR,GAAQC,GAAU,GAM1B,OADAQ,SAASC,iBAAiB,YAAaN,GAChC,WAELK,SAASE,oBAAoB,YAAaP,MAE3C,CAACP,EAAYG,IAChBG,qBAAU,WACR,IAAIZ,EAAMqB,aAAaC,QAAQ,iBAC3BD,aAAaC,QAAQ,iBACrB,KACJnB,EAAQoB,eAAevB,GACvBE,EAAMH,YAAYC,KACjB,IAEH,IAAMwB,EAAU,SAACxB,GACfU,GAAU,SAACD,GAAD,OAAaA,KACvBN,EAAQoB,eAAevB,GACvBqB,aAAaI,QAAQ,gBAAiBzB,GACtCE,EAAMH,YAAYC,IAGd0B,EAAUC,IAAOC,IAAV,gIAOPC,EAASF,YAAOD,EAAPC,CAAH,ugBAQJG,UAAMC,GAKVD,UAAMC,IAaJC,EAAcL,YAAOD,EAAPC,CAAH,8sBA2BbG,UAAMC,IAMJE,EAAaN,YAAOD,EAAPC,CAAH,iWAeVG,UAAMC,IAKNG,EAAUP,YAAOD,EAAPC,CAAH,0OASTG,UAAMK,IAIJC,EAAeT,YAAOD,EAAPC,CAAH,mlBA2BZU,EAAcV,YAAOD,EAAPC,CAAH,kTAkBjB,OACE,mCACGhB,EACC,eAACkB,EAAD,CAAQS,IAAKhC,EAAb,UACE,yBACEiC,UAAU,YACVf,QAAS,WACPd,GAAU,SAACD,GAAD,OAAaA,MAH3B,UAME,cAAC,IAAD,CAAkB+B,GAAG,WAAWC,eAAe,SAC/C,mBAAGF,UAAU,2BAEf,cAAC,IAAD,CACEG,OAAQjC,EACR8B,UACE,2CACC9B,EAAS,kBAAoB,IAJlC,SAOE,cAACuB,EAAD,UACE,eAACC,EAAD,WACE,wBACEM,UAAWpC,EAAQwC,OAAOC,SAAS,MAAQ,SAAW,GACtDpB,QAAS,kBAAMA,EAAQ,OAFzB,iBADF,IAOI,IACF,wBACEe,UAA8B,OAAnBpC,EAAQwC,OAAkB,SAAW,GAChDnB,QAAS,kBAAMA,EAAQ,OAFzB,0BAWR,eAACU,EAAD,CAASI,IAAKhC,EAAd,UACE,yBACEiC,UAAU,YACVf,QAAS,WACPd,GAAU,SAACD,GAAD,OAAaA,MAH3B,UAME,cAAC,IAAD,CAAkB+B,GAAG,WAAWC,eAAe,SAC/C,mBAAGF,UAAU,2BAEf,cAAC,IAAD,CACEG,OAAQjC,EACR8B,UACE,2CACC9B,EAAS,kBAAoB,IAJlC,SAOE,cAAC2B,EAAD,UACE,eAACC,EAAD,WACE,wBACEE,UAAWpC,EAAQwC,OAAOC,SAAS,MAAQ,SAAW,GACtDpB,QAAS,kBAAMA,EAAQ,OAFzB,iBADF,IAOI,IACF,wBACEe,UAA8B,OAAnBpC,EAAQwC,OAAkB,SAAW,GAChDnB,QAAS,kBAAMA,EAAQ,OAFzB","file":"static/js/48.51befd85.chunk.js","sourcesContent":["import React, { useContext, useState, useRef, useEffect } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport styled from \"styled-components\";\nimport Collapse from \"@kunukn/react-collapse\";\n\nimport { Context } from \"./wrapper\";\nimport Media from \"../Theme/media-breackpoint\";\nimport { connect } from \"react-redux\";\nimport { actions } from \"../actions\";\n\nconst Language = (props) => {\n  const context = useContext(Context);\n  const wrapperRef = useRef(null);\n  const [toggle, setToggle] = useState(false);\n  const header = props.header;\n\n  useEffect(() => {\n    /**\n     * Alert if clicked on outside of element\n     */\n    function handleClickOutside(event) {\n      if (\n        wrapperRef &&\n        wrapperRef.current &&\n        !wrapperRef.current.contains(event.target)\n      ) {\n        if (toggle) setToggle(false);\n      }\n    }\n\n    // Bind the event listener\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [wrapperRef, toggle]);\n  useEffect(() => {\n    let lng = localStorage.getItem(\"FibitLanguage\")\n      ? localStorage.getItem(\"FibitLanguage\")\n      : \"en\";\n    context.selectLanguage(lng);\n    props.setLanguage(lng);\n  }, []);\n\n  const onClick = (lng) => {\n    setToggle((toggle) => !toggle);\n    context.selectLanguage(lng);\n    localStorage.setItem(\"FibitLanguage\", lng);\n    props.setLanguage(lng);\n  };\n\n  const FlexDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-wrap: wrap;\n  `;\n\n  const LanBTN = styled(FlexDiv)`\n    margin-left: 30px;\n    position: relative;\n    button {\n      font-size: 12px;\n      font-weight: 600;\n      color: #000;\n      &.Lang-text {\n        ${Media.md} {\n          display: none;\n        }\n      }\n    }\n    ${Media.md} {\n      position: absolute;\n      right: 60px;\n      left: auto;\n      top: 0px;\n      .app__collapse {\n        opacity: 1;\n        overflow: visible !important;\n        visibility: visible !important;\n        height: auto !important;\n      }\n    }\n  `;\n  const DDContainer = styled(FlexDiv)`\n    position: absolute;\n    background-color: #fff;\n    padding: 15px;\n    border-radius: 20px;\n    box-shadow: 0 10px 20px 0 rgba(0, 0, 0, 0.3);\n    top: calc(100% + 30px);\n    width: 200px;\n    left: 50%;\n    transform: translateX(-50%);\n    overflow: hidden;\n    z-index: 100;\n    &.ver2 {\n      width: 300px;\n      left: auto;\n      transform: translateX(0);\n      right: 0;\n      top: calc(100% + 20px);\n      padding: 0;\n    }\n    &.ver3 {\n      width: 300px;\n      left: 50%;\n      transform: translateX(-50%);\n      top: calc(100% + 34px);\n      padding: 0;\n    }\n    ${Media.md} {\n      box-shadow: none;\n      width: max-content;\n      padding: 0px;\n    }\n  `;\n  const DDBtnbar01 = styled(FlexDiv)`\n    font-size: 16px;\n    color: #b3b3b3;\n    font-weight: 600;\n    button {\n      font-size: 16px;\n      padding: 0 10px;\n      margin: 0 6px;\n      color: #b3b3b3;\n      &.active {\n        color: #000;\n      }\n      :hover {\n        color: #000;\n      }\n      ${Media.md} {\n        font-size: 18px;\n      }\n    }\n  `;\n  const LanBTNF = styled(FlexDiv)`\n    margin-left: 30px;\n    position: relative;\n    margin-top: 50px;\n    button {\n      font-size: 12px;\n      font-weight: 400;\n      color: #fff;\n    }\n    ${Media.sm} {\n      margin-top: 32px;\n    }\n  `;\n  const DDContainerF = styled(FlexDiv)`\n    position: absolute;\n    background-color: #fff;\n    padding: 15px;\n    border-radius: 20px;\n    box-shadow: 0 10px 20px 0 rgba(0, 0, 0, 0.3);\n    bottom: calc(100% + 5px);\n    width: 200px;\n    right: 0;\n    overflow: hidden;\n    z-index: 100;\n    &.ver2 {\n      width: 300px;\n      left: auto;\n      transform: translateX(0);\n      right: 0;\n      top: calc(100% + 20px);\n      padding: 0;\n    }\n    &.ver3 {\n      width: 300px;\n      left: 50%;\n      transform: translateX(-50%);\n      top: calc(100% + 34px);\n      padding: 0;\n    }\n  `;\n  const DDBtnbar01F = styled(FlexDiv)`\n    font-size: 16px;\n    color: #b3b3b3;\n    font-weight: 600;\n    button {\n      font-size: 16px;\n      padding: 0 10px;\n      margin: 0 6px;\n      color: #b3b3b3;\n      &.active {\n        color: #000;\n      }\n      :hover {\n        color: #000;\n      }\n    }\n  `;\n\n  return (\n    <>\n      {header ? (\n        <LanBTN ref={wrapperRef}>\n          <button\n            className=\"Lang-text\"\n            onClick={() => {\n              setToggle((toggle) => !toggle);\n            }}\n          >\n            <FormattedMessage id=\"language\" defaultMessage=\"LANG\" />\n            <i className=\"fas fa-chevron-down\"></i>\n          </button>\n          <Collapse\n            isOpen={toggle}\n            className={\n              \"app__collapse collapse-css-transition  \" +\n              (toggle ? \"collapse-active\" : \"\")\n            }\n          >\n            <DDContainer>\n              <DDBtnbar01>\n                <button\n                  className={context.locale.includes(\"en\") ? \"active\" : \"\"}\n                  onClick={() => onClick(\"en\")}\n                >\n                  ENG\n                </button>\n                |{\" \"}\n                <button\n                  className={context.locale === \"tr\" ? \"active\" : \"\"}\n                  onClick={() => onClick(\"tr\")}\n                >\n                  TU\n                </button>\n              </DDBtnbar01>\n            </DDContainer>\n          </Collapse>\n        </LanBTN>\n      ) : (\n        <LanBTNF ref={wrapperRef}>\n          <button\n            className=\"Lang-text\"\n            onClick={() => {\n              setToggle((toggle) => !toggle);\n            }}\n          >\n            <FormattedMessage id=\"language\" defaultMessage=\"LANG\" />\n            <i className=\"fas fa-chevron-down\"></i>\n          </button>\n          <Collapse\n            isOpen={toggle}\n            className={\n              \"app__collapse collapse-css-transition  \" +\n              (toggle ? \"collapse-active\" : \"\")\n            }\n          >\n            <DDContainerF>\n              <DDBtnbar01F>\n                <button\n                  className={context.locale.includes(\"en\") ? \"active\" : \"\"}\n                  onClick={() => onClick(\"en\")}\n                >\n                  ENG\n                </button>\n                |{\" \"}\n                <button\n                  className={context.locale === \"tr\" ? \"active\" : \"\"}\n                  onClick={() => onClick(\"tr\")}\n                >\n                  TU\n                </button>\n              </DDBtnbar01F>\n            </DDContainerF>\n          </Collapse>\n        </LanBTNF>\n      )}\n    </>\n  );\n};\n\nconst mapDipatchToProps = (dispatch) => {\n  return {\n    setLanguage: (lng) => dispatch(actions.setLanguage(lng)),\n  };\n};\n\nexport default connect(null, mapDipatchToProps)(Language);\n"],"sourceRoot":""}