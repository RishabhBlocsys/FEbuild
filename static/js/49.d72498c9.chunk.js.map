{"version":3,"sources":["Pages/home.jsx"],"names":["Banner","loadable","TopNFT","HallOfFrame","Collections","Info","HallOfFrameInfo","Home","props","setCookie","dashboard","cookies","expire","Date","now","expiryTime","set","path","expires","state","loading","get","a","window","scrollTo","this","setDashboard","getDashboard","MainSection","className","map","data","index","name","isActive","React","Component","Gs","styled","withCookies","connect","fetchDashboard","dispatch","actions","fetchDashboardConfig","type"],"mappings":"yRAYMA,EAASC,aAAS,kBAAM,iEACxBC,EAASD,aAAS,kBAAM,8EACxBE,EAAcF,aAAS,kBAAM,gFAC7BG,EAAcH,aAAS,kBAAM,yDAC7BI,EAAOJ,aAAS,kBAAM,yDACtBK,EAAkBL,aAAS,kBAAM,yDAGjCM,E,kDAMF,WAAYC,GAAQ,IAAD,uBACf,cAAMA,IAyBVC,UAAY,SAACC,GACT,IAAQC,EAAY,EAAKH,MAAjBG,QACFC,EAAS,IAAIC,KAAKA,KAAKC,MAAsB,GAAbC,IAAkB,GAAK,KAC7DJ,EAAQK,IAAI,YAAaN,EAAW,CAAEO,KAAM,IAAKC,QAASN,KA3B1D,IAAQD,EAAYH,EAAZG,QAFO,OAGf,EAAKQ,MAAQ,CACTC,SAAS,EACTV,UAAWC,EAAQU,IAAI,cAAgB,MAL5B,E,4FASnB,gCAAAC,EAAA,sDACIC,OAAOC,SAAS,EAAG,GADvB,EAEmCC,KAAKjB,MAA5BE,EAFZ,EAEYA,UAAWC,EAFvB,EAEuBA,QACdc,KAAKN,MAAMT,WAAcA,EAG1Be,KAAKjB,MAAMkB,aAAaf,EAAQU,IAAI,cAFpCI,KAAKjB,MAAMmB,eAJnB,gD,sFAUA,WACI,MAA+BF,KAAKjB,MAA5BE,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,QACfD,IAAcC,EAAQU,IAAI,cAC1BI,KAAKhB,UAAUC,K,oBAWvB,WACI,OACI,cAAC,IAAGkB,YAAJ,CAAgBC,UAAU,OAA1B,SACI,cAAC,IAAD,UACKJ,KAAKjB,MAAME,UACRe,KAAKjB,MAAME,UAAUoB,KAAI,SAACC,EAAMC,GAC5B,MAAkB,WAAdD,EAAKE,MAAqBF,EAAKG,SACxB,cAAClC,EAAD,GAAagC,GACC,YAAdD,EAAKE,MAAsBF,EAAKG,SAChC,cAAChC,EAAD,GAAa8B,GACC,kBAAdD,EAAKE,MAA4BF,EAAKG,SACtC,cAAC/B,EAAD,GAAkB6B,GACJ,kBAAdD,EAAKE,MAA6BF,EAAKG,SAEzB,gBAAdH,EAAKE,MAA0BF,EAAKG,SACpC,cAAC9B,EAAD,GAAkB4B,GACJ,SAAdD,EAAKE,MAAmBF,EAAKG,SAC7B,cAAC7B,EAAD,GAAW2B,GAEX,GANA,cAAC1B,EAAD,GAAsB0B,MASnC,kB,GA7DPG,IAAMC,WAoEzBC,IAAGT,YAAcU,YAAOD,IAAGT,YAAVU,CAAjB,iEAmBeC,sBAAYC,aANH,SAACrB,GACrB,MAAO,CACHT,UAAWS,EAAMsB,mBATC,SAACC,GACvB,MAAO,CACHf,aAAc,kBAAMe,EAASC,IAAQC,yBACrClB,aAAc,SAACK,GAAD,OAAUW,EAAS,CAAEG,KAAM,oBAAqBd,KAAMA,QAUjDS,CAA4CjC","file":"static/js/49.d72498c9.chunk.js","sourcesContent":["import React from 'react';\r\nimport loadable from '@loadable/component'\r\nimport { connect } from 'react-redux';\r\nimport { instanceOf } from 'prop-types';\r\nimport LazyLoad from \"react-lazyload\";\r\nimport { withCookies, Cookies } from 'react-cookie';\r\nimport Gs from '../Theme/globalStyles';\r\n\r\nimport { actions } from '../actions';\r\nimport { expiryTime } from '../config';\r\nimport styled from \"styled-components\";\r\n\r\nconst Banner = loadable(() => import('../Component/home/banner'))\r\nconst TopNFT = loadable(() => import('../Component/home/topNFT'))\r\nconst HallOfFrame = loadable(() => import('../Component/home/hall.frame'))\r\nconst Collections = loadable(() => import('../Component/home/collection'))\r\nconst Info = loadable(() => import('../Component/home/info'))\r\nconst HallOfFrameInfo = loadable(() => import('../Component/home/hall.frame.info'))\r\n\r\n\r\nclass Home extends React.Component {\r\n\r\n    static propTypes = {\r\n        cookies: instanceOf(Cookies).isRequired\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const { cookies } = props;\r\n        this.state = {\r\n            loading: false,\r\n            dashboard: cookies.get('dashboard') || null,\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        window.scrollTo(0, 0);\r\n        const { dashboard, cookies } = this.props;\r\n        if (!this.state.dashboard && !dashboard) {\r\n            this.props.getDashboard() // fetch dashboard config\r\n        } else {\r\n            this.props.setDashboard(cookies.get('dashboard'))\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const { dashboard, cookies } = this.props\r\n        if (dashboard && !cookies.get('dashboard')) {\r\n            this.setCookie(dashboard) // set dashboard data in cookie\r\n        }\r\n    }\r\n\r\n    setCookie = (dashboard) => {\r\n        const { cookies } = this.props;\r\n        const expire = new Date(Date.now() + (expiryTime * 60 * 60 * 1000)) // cookie will expire after 12 hours\r\n        cookies.set('dashboard', dashboard, { path: '/', expires: expire });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Gs.MainSection className=\"mt-0\">\r\n                <LazyLoad>\r\n                    {this.props.dashboard ?\r\n                        this.props.dashboard.map((data, index) => {\r\n                            if (data.name === 'Banner' && data.isActive) {\r\n                                return <Banner key={index} />\r\n                            } else if (data.name === 'Top Nft' && data.isActive) {\r\n                                return <TopNFT key={index} />\r\n                            } else if (data.name === 'Hall Of Frame' && data.isActive) {\r\n                                return <HallOfFrame key={index} />\r\n                            } else if (data.name === 'Hall Of Frame' && !data.isActive) {\r\n                                return <HallOfFrameInfo key={index} />\r\n                            } else if (data.name === 'Collections' && data.isActive) {\r\n                                return <Collections key={index} />\r\n                            } else if (data.name === 'Info' && data.isActive) {\r\n                                return <Info key={index} />\r\n                            } else {\r\n                                return ''\r\n                            }\r\n                        })\r\n                        : 'loading'}\r\n                </LazyLoad>\r\n            </Gs.MainSection>\r\n        )\r\n    }\r\n}\r\n\r\nGs.MainSection = styled(Gs.MainSection)`\r\n  &.mt-0{\r\n    margin-top:0px;\r\n  }\r\n`;\r\n\r\nconst mapDipatchToProps = (dispatch) => {\r\n    return {\r\n        getDashboard: () => dispatch(actions.fetchDashboardConfig()),\r\n        setDashboard: (data) => dispatch({ type: 'FETCHED_DASHBOARD', data: data })\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dashboard: state.fetchDashboard,\r\n    }\r\n}\r\n\r\nexport default withCookies(connect(mapStateToProps, mapDipatchToProps)(Home));"],"sourceRoot":""}