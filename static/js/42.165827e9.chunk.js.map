{"version":3,"sources":["Assets/images/closeBTN01.svg","../node_modules/react-intl/lib/src/components/message.js","../node_modules/react-intl/lib/src/components/useIntl.js","Assets/images/dd-down-arrow.svg","Component/Modals/sucessPopup.jsx","Assets/images/peSocICO-01.svg","Assets/images/peSocICO-02.svg","Assets/images/peSocICO-03.svg","Assets/images/peSocICO-04.svg","Assets/images/peSocICO-05.svg","Assets/images/peSocICO-06.svg","Pages/profile-edit.jsx"],"names":["FormattedMessage","props","intl","React","Context","invariantIntlContext","useIntl","formatMessage","_a","textComponent","Text","id","description","defaultMessage","values","children","_b","tagName","Component","nodes","ignoreTag","Array","isArray","toArray","displayName","MemoizedFormattedMessage","prevProps","nextProps","otherProps","__rest","nextValues","nextOtherProps","shallowEqual","SuccessPopup","toggle","index","collapse","setState","prevState","state","isOpen1","this","message","url","BlackWrap","WhiteBX01","CloseBTN","className","onClick","src","CloseBTN01","alt","TokenBox","history","push","FlexDiv","styled","div","Media","xs","button","withRouter","ProfileEdit","formChange","e","userObj","target","name","portfolio","value","formSubmit","preventDefault","loading","updated","params","username","email","bio","setProfile","errors","profileUpdated","data","getProfile","onInstagramSuccess","code","sendInstaCode","onInstagramFailure","oauth_token","a","profile","Query","URLSearchParams","location","search","get","verifyByTwitter","error","verified_by_insta","access_token","verified_by_twitter","window","open","redirect_uri","clearErrors","pointSelect","curr","hash","substr","MainSection","OnbTitle01","LoaderBX","LoaderGif","style","minHeight","width","Container","NFTminting","W200px","NFTLeft","items","currentClassName","to","smooth","BackBTN01","W880px","W605px","NFTMiddle","AlertNote","onChange","onSubmit","NFTtitle","NFTForm","placeholder","type","required","onKeyPress","key","defaultValue","CICON03","website","CICON01","twitter","CICON02","instagarm","CICON04","discord","CICON05","youtube","CICON06","facebook","CreateItemButton","disabled","sm","NFTfourbox","Gs","W25V2","TenpxGutter","lg","DDdownA","connect","fetchProfile","updateProfile","fetchResponseFailed","verified_by_instagram","fetch_twitter_access_token","dispatch","actions","updateUserDetails","sendInstagramCode","getTwitterAccessToken","token","verifier"],"mappings":"iGAAe,QAA0B,wC,mECezC,SAASA,EAAiBC,GACtB,IAAIC,ECbO,WACX,IAAIA,EAAOC,aAAiBC,KAE5B,OADAC,YAAqBH,GACdA,EDUII,GACPC,EAAgBL,EAAKK,cAAeC,EAAKN,EAAKO,cAAeC,OAAc,IAAPF,EAAgBL,WAAiBK,EACrGG,EAAKV,EAAMU,GAAIC,EAAcX,EAAMW,YAAaC,EAAiBZ,EAAMY,eAAgBC,EAASb,EAAMa,OAAQC,EAAWd,EAAMc,SAAUC,EAAKf,EAAMgB,QAASC,OAAmB,IAAPF,EAAgBN,EAAOM,EAEhMG,EAAQZ,EADK,CAAEI,GAAIA,EAAIC,YAAaA,EAAaC,eAAgBA,GAC/BC,EAAQ,CAC1CM,UAHgNnB,EAAMmB,YAK1N,MAAwB,oBAAbL,EACAA,EAASM,MAAMC,QAAQH,GAASA,EAAQ,CAACA,IAEhDD,EACOf,gBAAoBe,EAAW,KAAMf,WAAeoB,QAAQJ,IAEhEhB,gBAAoBA,WAAgB,KAAMgB,GAErDnB,EAAiBwB,YAAc,mBAC/B,IAAIC,EAA2BtB,OAAWH,GAvB1C,SAAkB0B,EAAWC,GACzB,IAAIb,EAASY,EAAUZ,OAAQc,EAAaC,YAAOH,EAAW,CAAC,WAC3DI,EAAaH,EAAUb,OAAQiB,EAAiBF,YAAOF,EAAW,CAAC,WACvE,OAAQK,YAAaF,EAAYhB,IAC7BkB,YAAaJ,EAAYG,MAoBjCN,EAAyBD,YAAc,2BACxBC,O,iCElCA,QAA0B,2C,yJCQnCQ,E,kDAEJ,WAAYhC,GAAQ,IAAD,8BACjB,cAAMA,IAMRiC,OAAS,SAACC,GACR,IAAIC,EAAW,SAAWD,EAC1B,EAAKE,UAAS,SAACC,GAAD,sBAAmBF,GAAYE,EAAUF,QAPvD,EAAKG,MAAQ,CACXC,SAAS,GAHM,E,0CAYnB,WAAU,IAAD,OACP,EAAyBC,KAAKxC,MAAtByC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,IACTH,EAAYC,KAAKF,MAAjBC,QACR,OACE,mCACIA,EAeE,GAdF,cAACI,EAAD,UACE,eAACC,EAAD,WACE,eAACC,EAAD,CAAUC,UAAU,QAAQC,QAAS,kBAAM,EAAKd,OAAO,IAAvD,UACG,IACD,qBAAKe,IAAKC,IAAYC,IAAI,KAAM,OAElC,eAACC,EAAD,WACE,4BAAKV,IACL,wBAAQM,QAAS,kBAAM,EAAK/C,MAAMoD,QAAQC,KAAKX,IAA/C,SACE,cAAC,IAAD,CAAkBhC,GAAG,OAAOE,eAAe,yB,GA7BlCK,aAwCrBqC,EAAUC,IAAOC,IAAV,2KASPb,EAAYY,YAAOD,EAAPC,CAAH,2LAUTX,EAAYW,YAAOD,EAAPC,CAAH,oSAWXE,UAAMC,IAIJb,EAAWU,IAAOI,OAAV,+OAWVF,UAAMC,IAKJP,EAAWI,YAAOD,EAAPC,CAAH,gZAsBCK,gBAAW5B,I,2QCxHX,MAA0B,wCCA1B,MAA0B,wCCA1B,MAA0B,wCCA1B,MAA0B,wCCA1B,OAA0B,wCCA1B,OAA0B,wC,4ECwBnC6B,G,kDACJ,WAAY7D,GAAQ,IAAD,8BACjB,cAAMA,IA4DR8D,WAAa,SAACC,GACZ,MAAgC,EAAKzB,MAA7B0B,EAAR,EAAQA,QAAR,EAAiBF,WAEG,YAAlBC,EAAEE,OAAOC,MACS,cAAlBH,EAAEE,OAAOC,MACS,aAAlBH,EAAEE,OAAOC,MACS,WAAlBH,EAAEE,OAAOC,MACS,YAAlBH,EAAEE,OAAOC,MACS,YAAlBH,EAAEE,OAAOC,MACS,YAAlBH,EAAEE,OAAOC,MACS,WAAlBH,EAAEE,OAAOC,MACS,WAAlBH,EAAEE,OAAOC,MACS,aAAlBH,EAAEE,OAAOC,KAELF,EAAQG,UACV,EAAK/B,SAAS,CACZ0B,YAAY,EACZE,QAAQ,2BACHA,GADE,IAELG,UAAU,2BACLH,EAAQG,WADJ,kBAENJ,EAAEE,OAAOC,KAFH,2BAGFF,EAAQG,UAAUJ,EAAEE,OAAOC,OAHzB,IAILxB,IAAKqB,EAAEE,OAAOG,cAMtB,EAAKhC,SAAS,CACZ0B,YAAY,EACZE,QAAQ,2BACHA,GADE,IAELG,UAAU,eAAIJ,EAAEE,OAAOC,KAAOH,EAAEE,OAAOG,WAK7C,EAAKhC,SAAS,CACZ0B,YAAY,EACZE,QAAQ,2BAAMA,GAAP,kBAAiBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOG,WArGpC,EA0GnBC,WAAa,SAACN,GACZA,EAAEO,iBACF,EAAKlC,SAAS,CACZmC,SAAS,EACTC,SAAS,EACTV,YAAY,IAEd,IAAQE,EAAY,EAAK1B,MAAjB0B,QACJS,EAAS,CACXP,KAAMF,EAAQE,KACdQ,SAAUV,EAAQU,SAClBC,MAAOX,EAAQW,MACfC,IAAKZ,EAAQY,IACbT,UAAWH,EAAQG,WAErB,EAAKnE,MAAM6E,WAAWJ,GACtB,EAAKrC,SAAS,CAAE0C,OAAQ,QA1HP,EA6HnBC,eAAiB,SAACC,GAChB,EAAKhF,MAAMiF,aACX,EAAK7C,SAAS,CAAEmC,SAAS,EAAOC,SAAS,KA/HxB,EAkInBvC,OAAS,SAACC,GACR,IAAIC,EAAW,SAAWD,EAC1B,EAAKE,UAAS,SAACC,GAAD,sBAAmBF,GAAYE,EAAUF,QApItC,EAuInB+C,mBAAqB,SAACC,GACpB,EAAKnF,MAAMoF,cAAcD,GACzB,EAAK/C,SAAS,CAAEmC,SAAS,KAzIR,EA4InBc,mBAAqB,SAACZ,KA1IpB,EAAKnC,MAAQ,CACXwC,OAAQ,KACRP,SAAS,EACTC,SAAS,EACTR,QAAS,KACTF,YAAY,EACZwB,YAAa,MARE,E,4FAYnB,8BAAAC,EAAA,uDACUC,EAAYhD,KAAKxC,MAAjBwF,SAINhD,KAAKJ,SAAS,CAAE4B,QAASwB,IAFzBhD,KAAKxC,MAAMiF,cAITQ,EAAQ,IAAIC,gBAAgBlD,KAAKxC,MAAM2F,SAASC,SAC1CC,IAAI,gBAAkBJ,EAAMI,IAAI,mBACxCrD,KAAKxC,MAAM8F,gBACTL,EAAMI,IAAI,eACVJ,EAAMI,IAAI,mBAXhB,gD,sFAgBA,SAAmBpE,EAAWY,GAC5B,MAOIG,KAAKxC,MANPwF,EADF,EACEA,QACAhB,EAFF,EAEEA,QACAuB,EAHF,EAGEA,MACAC,EAJF,EAIEA,kBACAC,EALF,EAKEA,aACAC,EANF,EAMEA,oBAEEV,IAAY/D,EAAU+D,SACxBhD,KAAKJ,SAAS,CAAE4B,QAASwB,IAEvBhB,IAAY/C,EAAU+C,SACxBhC,KAAKuC,eAAeP,GAElBwB,IAAsBvE,EAAUuE,mBAClCxD,KAAKuC,eAAeP,GAElB0B,IAAwBzE,EAAUyE,qBACpC1D,KAAKuC,eAAeP,GAElByB,IAAiBxE,EAAUwE,cAE7BE,OAAOC,KAAKH,EAAaI,aAAc,SAErCN,IAAUtE,EAAUsE,OAClBA,IACFvD,KAAKJ,SAAS,CAAE0C,OAAQiB,EAAOxB,SAAS,IACxC/B,KAAKxC,MAAMsG,iB,oBAwFjB,WAAU,IAAD,OACCd,EAAYhD,KAAKxC,MAAjBwF,QACR,EAAiDhD,KAAKF,MAA9CiC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,QAASV,EAA1B,EAA0BA,WAAYgB,EAAtC,EAAsCA,OAEtC,SAASyB,EAAYC,GAEnB,OADWL,OAAOR,SAASc,KAAKC,OAAO,KAC1BF,EAAa,SACd,WAGd,OACE,gBAAC,IAAGG,YAAJ,WACGpC,EACC,qCACE,eAAC5B,GAAD,UACE,gBAACC,GAAD,WACE,eAACgE,GAAD,CAAY9D,UAAU,KAAtB,6CAGA,eAAC+D,GAAD,UACE,sBAAK7D,IAAK8D,KAAW5D,IAAI,cAMjC,GAGDsB,EACC,eAAC,KAAD,CACE/B,QAAS,eAAC,IAAD,CAAkB/B,GAAG,oBAC9BgC,IAAI,kBAGN,GAGF,sBAAKqE,MAAO,CAAEC,UAAW,QAASC,MAAO,QAAzC,SACE,eAAC,IAAGC,UAAJ,UACE,gBAACC,GAAD,WACE,eAAC,IAAGC,OAAJ,UACE,gBAAC,IAAD,WACE,eAACC,GAAD,UACE,gBAAC,KAAD,CACEC,MAAO,CACL,kBACA,YAEA,cAEFC,iBAAiB,SAPnB,UASE,eAAC,IAAD,CACEzE,UAAWyD,EAAY,mBACvBiB,GAAG,mBACHC,QAAQ,EAHV,SAKE,eAAC,IAAD,CACE/G,GAAG,mBACHE,eAAe,uBAGnB,eAAC,IAAD,CACEkC,UAAWyD,EAAY,aACvBiB,GAAG,aACHC,QAAQ,EAHV,SAKE,eAAC,IAAD,CACE/G,GAAG,YACHE,eAAe,gBAUnB,eAAC,IAAD,CACEkC,UAAWyD,EAAY,cACvBiB,GAAG,cACHC,QAAQ,EAHV,SAKE,eAAC,IAAD,CACE/G,GAAG,eACHE,eAAe,wBAMvB,eAAC8G,GAAD,CACE3E,QAAS,kBAAM,EAAK/C,MAAMoD,QAAQC,KAAK,kBADzC,SAGE,eAAC,IAAD,CACE3C,GAAG,kBACHE,eAAe,2BAKvB,gBAAC,IAAG+G,OAAJ,CAAW7E,UAAU,cAArB,UACGgC,EACC,eAAC,IAAG8C,OAAJ,UACE,eAACC,GAAD,UACE,eAACC,GAAD,UACE,6BAAIhD,UAJL,GAYP,eAAC,IAAG8C,OAAJ,UACE,eAACC,GAAD,UACE,wBACEE,SAAU,SAAChE,GAAD,OAAO,EAAKD,WAAWC,IACjCiE,SAAU,SAACjE,GAAD,OAAO,EAAKM,WAAWN,IAFnC,UAIE,uBAAKrD,GAAG,kBAAR,UACE,gBAACuH,GAAD,WACE,8BACE,eAAC,IAAD,CACEvH,GAAG,mBACHE,eAAe,uBAGnB,oBAAGkC,UAAU,QAAb,SACE,eAAC,IAAD,CACEpC,GAAG,0BACHE,eAAe,kEAIrB,gBAACsH,GAAD,WACE,sBAAKpF,UAAU,aAAf,SACE,iCACE,eAAC,IAAD,CACEpC,GAAG,YACHE,eAAe,aAIrB,eAAC,IAAD,CACEF,GAAG,iBACHE,eAAe,uBAFjB,SAIG,SAACuH,GAAD,OACC,wBACEC,KAAK,OACLC,UAAQ,EACRnE,KAAK,OACLoE,WAAY,SAACvE,GACG,UAAVA,EAAEwE,KACJxE,EAAEO,kBAGNkE,aACEhD,GAAWA,EAAQtB,KAAOsB,EAAQtB,KAAa,GAEjDiE,YAAaA,UAKrB,gBAACD,GAAD,WACE,sBAAKpF,UAAU,aAAf,SACE,iCACE,eAAC,IAAD,CACEpC,GAAG,gBACHE,eAAe,iBAIrB,uBAAKkC,UAAU,QAAf,UACE,mCACA,eAAC,IAAD,CACEpC,GAAG,iBACHE,eAAe,uBAFjB,SAIG,SAACuH,GAAD,OACC,wBACEC,KAAK,OACLC,UAAQ,EACRnE,KAAK,WACLoE,WAAY,SAACvE,GACG,UAAVA,EAAEwE,KACJxE,EAAEO,kBAGNkE,aACEhD,GACIA,EAAQd,SACNc,EAAQd,SAEV,GAENyD,YAAaA,aAgBvB,gBAACD,GAAD,WACE,uBAAKpF,UAAU,aAAf,UACE,iCACE,eAAC,IAAD,CACEpC,GAAG,QACHE,eAAe,YAGnB,eAAC0C,GAAD,CAASR,UAAU,OAAnB,SACE,6BACE,eAAC,IAAD,CACEpC,GAAG,mBACHE,eAAe,iEAKvB,eAAC,IAAD,CACEF,GAAG,iBACHE,eAAe,uBAFjB,SAIG,SAACuH,GAAD,OACC,wBACEC,KAAK,OACLC,UAAQ,EACRnE,KAAK,QACLoE,WAAY,SAACvE,GACG,UAAVA,EAAEwE,KACJxE,EAAEO,kBAGNkE,aACEhD,GACIA,EAAQb,MACNa,EAAQb,MAEV,GAENwD,YAAaA,aAOvB,uBAAKzH,GAAG,YAAR,UACE,gBAACuH,GAAD,WACE,qBAAInF,UAAU,QAAd,SACE,eAAC,IAAD,CACEpC,GAAG,YACHE,eAAe,gBAGnB,oBAAGkC,UAAU,QAAb,SACE,eAAC,IAAD,CACEpC,GAAG,uBACHE,eAAe,2CAIrB,eAACsH,GAAD,UACA,eAAC,IAAD,CACIxH,GAAG,iBACHE,eAAe,uBAFnB,SAIK,SAACuH,GAAD,OACC,uCACEC,KAAK,WACLlE,KAAK,MACLiE,YAAY,IACZG,WAAY,SAACvE,GACG,UAAVA,EAAEwE,KACJxE,EAAEO,kBAGNkE,aACEhD,GAAWA,EAAQZ,IAAMY,EAAQZ,IAAY,IAVjD,cAYeuD,YA2FvB,uBAAKzH,GAAG,aAAR,UACE,gBAACuH,GAAD,WACE,qBAAInF,UAAU,QAAd,SACE,eAAC,IAAD,CACEpC,GAAG,eACHE,eAAe,mBAGnB,oBAAGkC,UAAU,QAAb,SACE,eAAC,IAAD,CACEpC,GAAG,qBACHE,eAAe,0DAKrB,gBAACsH,GAAD,WACE,sBAAKpF,UAAU,aAAf,SACE,iCACE,eAAC,IAAD,CACEpC,GAAG,UACHE,eAAe,gBAIrB,uBAAKkC,UAAU,QAAf,UACE,6BACE,sBAAKE,IAAKyF,EAASvF,IAAI,OAEzB,eAAC,IAAD,CACExC,GAAG,iBACHE,eAAe,uBAFjB,SAIG,SAACuH,GAAD,aACC,wBACEC,KAAK,MACLlE,KAAK,UACLoE,WAAY,SAACvE,GACG,UAAVA,EAAEwE,KACJxE,EAAEO,kBAGNkE,aACEhD,GACI,UAAAA,EAAQrB,iBAAR,SAAmBuE,QACjBlD,EAAQrB,UAAUuE,QAAQhG,IAE5B,GAENyF,YAAaA,aAMvB,gBAACD,GAAD,WACE,sBAAKpF,UAAU,aAAf,SACE,+CAEF,uBAAKA,UAAU,QAAf,UACE,6BACE,sBAAKE,IAAK2F,EAASzF,IAAI,OAEzB,eAAC,IAAD,CACExC,GAAG,iBACHE,eAAe,uBAFjB,SAIG,SAACuH,GAAD,aACC,wBACEC,KAAK,MACLlE,KAAK,UACLoE,WAAY,SAACvE,GACG,UAAVA,EAAEwE,KACJxE,EAAEO,kBAGNkE,aACEhD,GACI,UAAAA,EAAQrB,iBAAR,SAAmByE,QACjBpD,EAAQrB,UAAUyE,QAAQlG,IAE5B,GAENyF,YAAaA,aAMvB,gBAACD,GAAD,WACE,sBAAKpF,UAAU,aAAf,SACE,iDAEF,uBAAKA,UAAU,QAAf,UACE,6BACE,sBAAKE,IAAK6F,EAAS3F,IAAI,OAEzB,eAAC,IAAD,CACExC,GAAG,iBACHE,eAAe,uBAFjB,SAIG,SAACuH,GAAD,aACC,wBACEC,KAAK,MACLlE,KAAK,YACLoE,WAAY,SAACvE,GACG,UAAVA,EAAEwE,KACJxE,EAAEO,kBAGNkE,aACEhD,GACI,UAAAA,EAAQrB,iBAAR,SAAmB2E,UACjBtD,EAAQrB,UAAU2E,UAAUpG,IAE9B,GAENyF,YAAaA,aAOvB,gBAACD,GAAD,WACE,sBAAKpF,UAAU,aAAf,SACE,+CAEF,uBAAKA,UAAU,QAAf,UACE,6BACE,sBAAKE,IAAK+F,EAAS7F,IAAI,OAEzB,eAAC,IAAD,CACExC,GAAG,iBACHE,eAAe,uBAFjB,SAIG,SAACuH,GAAD,aACC,wBACEC,KAAK,MACLlE,KAAK,UACLoE,WAAY,SAACvE,GACG,UAAVA,EAAEwE,KACJxE,EAAEO,kBAGNkE,aACEhD,GACI,UAAAA,EAAQrB,iBAAR,SAAmB6E,QACjBxD,EAAQrB,UAAU6E,QAAQtG,IAE5B,GAENyF,YAAaA,aAMvB,gBAACD,GAAD,WACE,sBAAKpF,UAAU,aAAf,SACE,iCACE,eAAC,IAAD,CACEpC,GAAG,UACHE,eAAe,gBAIrB,uBAAKkC,UAAU,QAAf,UACE,6BACE,sBAAKE,IAAKiG,GAAS/F,IAAI,OAEzB,eAAC,IAAD,CACExC,GAAG,iBACHE,eAAe,uBAFjB,SAIG,SAACuH,GAAD,aACC,wBACEC,KAAK,MACLlE,KAAK,UACLoE,WAAY,SAACvE,GACG,UAAVA,EAAEwE,KACJxE,EAAEO,kBAGNkE,aACEhD,GACI,UAAAA,EAAQrB,iBAAR,SAAmB+E,QACjB1D,EAAQrB,UAAU+E,QAAQxG,IAE5B,GAENyF,YAAaA,aAMvB,gBAACD,GAAD,WACE,sBAAKpF,UAAU,aAAf,SACE,gDAEF,uBAAKA,UAAU,QAAf,UACE,6BACE,sBAAKE,IAAKmG,GAASjG,IAAI,OAEzB,eAAC,IAAD,CACExC,GAAG,iBACHE,eAAe,uBAFjB,SAIG,SAACuH,GAAD,aACC,wBACEC,KAAK,MACLlE,KAAK,WACLoE,WAAY,SAACvE,GACG,UAAVA,EAAEwE,KACJxE,EAAEO,kBAGNkE,aACEhD,GACI,UAAAA,EAAQrB,iBAAR,SAAmBiF,SACjB5D,EAAQrB,UAAUiF,SAAS1G,IAE7B,GAENyF,YAAaA,gBAOzB,eAACkB,GAAD,UACE,yBACEjB,KAAK,SACLkB,UAAWxF,EAFb,SAIE,eAAC,IAAD,CACEpD,GAAG,8BACHE,eAAe,6C,GAjwBjBK,aAixBpBqC,GAAUC,IAAOC,IAAV,2KAUP2D,GAAa5D,YAAOD,GAAPC,CAAH,kNAaV8D,GAAU9D,IAAOC,IAAV,oqBAuCPyE,IAJW1E,IAAOC,IAAV,iDAIGD,IAAOC,IAAV,ydASNC,WAAM8F,KAmBRC,GAAajG,YAAOD,GAAPC,CAAH,qpBA6BhBkG,IAAGC,MAAQnG,YAAOkG,IAAGC,MAAVnG,CAAX,qEACIiG,IAKJC,IAAGE,YAAcpG,YAAOkG,IAAGE,YAAVpG,CAAjB,qEACIiG,IAKJC,IAAG7B,OAASrE,YAAOkG,IAAG7B,OAAVrE,CAAZ,qFACI4D,GACE1D,WAAMmG,IAKZ,IAAM/B,GAAYtE,IAAOC,IAAV,qHAEXC,WAAMmG,GAGNnG,WAAM8F,IAKJrB,GAAU3E,IAAOC,IAAV,s+DAoIP6F,IAxBgB9F,YAAOD,GAAPC,CAAH,wcAwBMA,IAAOC,IAAV,uXAclBC,WAAM8F,KAwOJ7B,IAlOenE,YAAOD,GAAPC,CAAH,m3BA2CMA,YAAOD,GAAPC,CAAH,4zCA+BfE,WAAMmG,IAgCarG,YAAOD,GAAPC,CAAH,ylBAMAsG,KAuBJtG,YAAOD,GAAPC,CAAH,wnBAoCIA,YAAOD,GAAPC,CAAH,olBAiCIA,YAAOD,GAAPC,CAAH,0bAsBCA,IAAOI,OAAV,iSAeTkD,GAAWtD,YAAOD,GAAPC,CAAH,yEAKRqD,GAAarD,IAAOC,IAAV,2NAuBVb,IAVYY,IAAOC,IAAV,qJAUGD,YAAOD,GAAPC,CAAH,4LAUTX,GAAYW,YAAOD,GAAPC,CAAH,sSAWXE,WAAMC,IAoBJoE,IAhBWvE,IAAOI,OAAV,gPAWVF,WAAMC,IAKQH,IAAOC,IAAV,8RAqCAI,sBACbkG,aAZsB,SAACxH,GACvB,MAAO,CACLkD,QAASlD,EAAMyH,aACfvF,QAASlC,EAAM0H,cACfjE,MAAOzD,EAAM2H,oBACbjE,kBAAmB1D,EAAM4H,sBACzBjE,aAAc3D,EAAM6H,2BACpBjE,oBAAqB5D,EAAM4D,wBAlBL,SAACkE,GACzB,MAAO,CACLnF,WAAY,kBAAMmF,EAASC,KAAQpF,eACnCJ,WAAY,SAACJ,GAAD,OAAY2F,EAASC,KAAQC,kBAAkB7F,KAC3D6B,YAAa,kBAAM8D,EAAS,CAAEhC,KAAM,aAAcpD,KAAM,QACxDI,cAAe,SAACD,GAAD,OAAUiF,EAASC,KAAQE,kBAAkBpF,KAC5DqF,sBAAuB,kBAAMJ,EAASC,KAAQG,0BAC9C1E,gBAAiB,SAAC2E,EAAOC,GAAR,OACfN,EAASC,KAAQvE,gBAAgB2E,EAAOC,QAe5CZ,CAA4CjG","file":"static/js/42.165827e9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/closeBTN01.56b7d7a8.svg\";","/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport useIntl from './useIntl';\nimport { shallowEqual } from '../utils';\nfunction areEqual(prevProps, nextProps) {\n    var values = prevProps.values, otherProps = __rest(prevProps, [\"values\"]);\n    var nextValues = nextProps.values, nextOtherProps = __rest(nextProps, [\"values\"]);\n    return (shallowEqual(nextValues, values) &&\n        shallowEqual(otherProps, nextOtherProps));\n}\nfunction FormattedMessage(props) {\n    var intl = useIntl();\n    var formatMessage = intl.formatMessage, _a = intl.textComponent, Text = _a === void 0 ? React.Fragment : _a;\n    var id = props.id, description = props.description, defaultMessage = props.defaultMessage, values = props.values, children = props.children, _b = props.tagName, Component = _b === void 0 ? Text : _b, ignoreTag = props.ignoreTag;\n    var descriptor = { id: id, description: description, defaultMessage: defaultMessage };\n    var nodes = formatMessage(descriptor, values, {\n        ignoreTag: ignoreTag,\n    });\n    if (typeof children === 'function') {\n        return children(Array.isArray(nodes) ? nodes : [nodes]);\n    }\n    if (Component) {\n        return React.createElement(Component, null, React.Children.toArray(nodes));\n    }\n    return React.createElement(React.Fragment, null, nodes);\n}\nFormattedMessage.displayName = 'FormattedMessage';\nvar MemoizedFormattedMessage = React.memo(FormattedMessage, areEqual);\nMemoizedFormattedMessage.displayName = 'MemoizedFormattedMessage';\nexport default MemoizedFormattedMessage;\n","import * as React from 'react';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils';\nexport default function useIntl() {\n    var intl = React.useContext(Context);\n    invariantIntlContext(intl);\n    return intl;\n}\n","export default __webpack_public_path__ + \"static/media/dd-down-arrow.b43265cd.svg\";","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { withRouter } from \"react-router\";\nimport CloseBTN01 from \"../../Assets/images/closeBTN01.svg\";\nimport Media from '../../Theme/media-breackpoint';\nimport { FormattedMessage } from \"react-intl\";\n\n\nclass SuccessPopup extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen1: false,\n    };\n  }\n\n  toggle = (index) => {\n    let collapse = \"isOpen\" + index;\n    this.setState((prevState) => ({ [collapse]: !prevState[collapse] }));\n  }\n\n  render() {\n    const { message, url } = this.props;\n    const { isOpen1 } = this.state\n    return (\n      <>\n        {!isOpen1 ?\n          <BlackWrap>\n            <WhiteBX01>\n              <CloseBTN className=\"ani-1\" onClick={() => this.toggle(1)}>\n                {\" \"}\n                <img src={CloseBTN01} alt=\"\" />{\" \"}\n              </CloseBTN>\n              <TokenBox >\n                <p >{message}</p>\n                <button onClick={() => this.props.history.push(url)}>\n                  <FormattedMessage id=\"view\" defaultMessage=\"View\" />\n                </button>\n              </TokenBox>\n            </WhiteBX01>\n          </BlackWrap>\n          : ''}\n      </>\n    );\n  }\n}\n\nconst FlexDiv = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n  .JCSB {\n    justify-content: space-between;\n  }\n`;\nconst BlackWrap = styled(FlexDiv)`\n  position: fixed;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.6);\n  z-index: 101;\n  backdrop-filter: blur(2px);\n`;\nconst WhiteBX01 = styled(FlexDiv)`\n  width: 100%;\n  position: relative;\n  max-width: 400px;\n  margin: 0 15px;\n  min-height: 418px;\n  padding: 50px;\n  background-color: #fff;\n  border-radius: 30px;\n  justify-content: flex-start;\n  align-content: center;\n  ${Media.xs}{\n    padding:50px 25px;\n  }\n`;\nconst CloseBTN = styled.button`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  right: 20px;\n  top: 27px;\n  padding: 0;\n  margin: 0px;\n  :hover {\n    transform: rotate(90deg);\n  }\n  ${Media.xs}{\n    right: 15px;\n    top: 15px;\n  }\n`;\nconst TokenBox = styled(FlexDiv)`\n  justify-content: center;\n  width: 100%;\n  margin-bottom: 20px;\n  button {\n    color: #000000;\n    font-size: 14px;\n    font-weight: 700;\n    letter-spacing: -0.5px;\n    padding: 13px 35px;\n    border-radius: 15px;\n    border: 1px solid #000000;\n    :hover {\n      background-color: #000;\n      color: #fff;\n    }\n  }\n  p {\n    text-align: center;\n  }\n`;\n\nexport default withRouter(SuccessPopup);","export default __webpack_public_path__ + \"static/media/peSocICO-01.d1292eb8.svg\";","export default __webpack_public_path__ + \"static/media/peSocICO-02.88ab3ad6.svg\";","export default __webpack_public_path__ + \"static/media/peSocICO-03.48d4f1be.svg\";","export default __webpack_public_path__ + \"static/media/peSocICO-04.aebc2207.svg\";","export default __webpack_public_path__ + \"static/media/peSocICO-05.4bf0eaa8.svg\";","export default __webpack_public_path__ + \"static/media/peSocICO-06.78d14945.svg\";","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport Gs from \"../Theme/globalStyles\";\nimport { connect } from \"react-redux\";\nimport { FormattedMessage } from \"react-intl\";\nimport { HashLink as Link } from \"react-router-hash-link\";\nimport { withRouter } from \"react-router\";\nimport Sticky from \"react-sticky-el\";\n\nimport DDdownA from \"../Assets/images/dd-down-arrow.svg\";\nimport CICON01 from \"../Assets/images/peSocICO-01.svg\";\nimport CICON02 from \"../Assets/images/peSocICO-02.svg\";\nimport CICON03 from \"../Assets/images/peSocICO-03.svg\";\nimport CICON04 from \"../Assets/images/peSocICO-04.svg\";\nimport CICON05 from \"../Assets/images/peSocICO-05.svg\";\nimport CICON06 from \"../Assets/images/peSocICO-06.svg\";\nimport LoaderGif from \"../Assets/images/1479.gif\";\nimport SuccessPopup from \"../Component/Modals/sucessPopup\";\n\nimport { actions } from \"../actions\";\nimport { client_id, redirect_url } from \"../config\";\nimport Media from \"../Theme/media-breackpoint\";\nimport Scrollspy from \"react-scrollspy\";\n\nclass ProfileEdit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      errors: null,\n      loading: false,\n      updated: false,\n      userObj: null,\n      formChange: false,\n      oauth_token: null,\n    };\n  }\n\n  async componentDidMount() {\n    const { profile } = this.props;\n    if (!profile) {\n      this.props.getProfile(); // fetch profile\n    } else {\n      this.setState({ userObj: profile });\n    }\n    let Query = new URLSearchParams(this.props.location.search);\n    if (Query.get(\"oauth_token\") && Query.get(\"oauth_verifier\")) {\n      this.props.verifyByTwitter(\n        Query.get(\"oauth_token\"),\n        Query.get(\"oauth_verifier\")\n      ); // verify via twitter\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    let {\n      profile,\n      updated,\n      error,\n      verified_by_insta,\n      access_token,\n      verified_by_twitter,\n    } = this.props;\n    if (profile !== prevProps.profile) {\n      this.setState({ userObj: profile }); // store props into state\n    }\n    if (updated !== prevProps.updated) {\n      this.profileUpdated(updated); // profile updated\n    }\n    if (verified_by_insta !== prevProps.verified_by_insta) {\n      this.profileUpdated(updated); // verified by instagram\n    }\n    if (verified_by_twitter !== prevProps.verified_by_twitter) {\n      this.profileUpdated(updated); // verified by twitter\n    }\n    if (access_token !== prevProps.access_token) {\n      // console.log('access_token ? ', access_token)\n      window.open(access_token.redirect_uri, \"_self\");\n    }\n    if (error !== prevProps.error) {\n      if (error) {\n        this.setState({ errors: error, loading: false }); // set api error into state\n        this.props.clearErrors(); // clear the error\n      }\n    }\n  }\n\n  formChange = (e) => {\n    const { userObj, formChange } = this.state;\n    if (\n      e.target.name === \"website\" ||\n      e.target.name === \"instagarm\" ||\n      e.target.name === \"facebook\" ||\n      e.target.name === \"github\" ||\n      e.target.name === \"twitter\" ||\n      e.target.name === \"discord\" ||\n      e.target.name === \"youtube\" ||\n      e.target.name === \"twitch\" ||\n      e.target.name === \"tiktok\" ||\n      e.target.name === \"snapchat\"\n    ) {\n      if (userObj.portfolio) {\n        this.setState({\n          formChange: true,\n          userObj: {\n            ...userObj,\n            portfolio: {\n              ...userObj.portfolio,\n              [e.target.name]: {\n                ...userObj.portfolio[e.target.name],\n                url: e.target.value,\n              },\n            },\n          },\n        });\n      } else {\n        this.setState({\n          formChange: true,\n          userObj: {\n            ...userObj,\n            portfolio: { [e.target.name]: e.target.value },\n          },\n        });\n      }\n    } else {\n      this.setState({\n        formChange: true,\n        userObj: { ...userObj, [e.target.name]: e.target.value },\n      });\n    }\n  };\n\n  formSubmit = (e) => {\n    e.preventDefault();\n    this.setState({\n      loading: true,\n      updated: false,\n      formChange: false,\n    }); // start the loader\n    const { userObj } = this.state;\n    let params = {\n      name: userObj.name,\n      username: userObj.username,\n      email: userObj.email,\n      bio: userObj.bio,\n      portfolio: userObj.portfolio,\n    };\n    this.props.setProfile(params); // update the user profile\n    this.setState({ errors: null });\n  };\n\n  profileUpdated = (data) => {\n    this.props.getProfile(); // fetch profile\n    this.setState({ loading: false, updated: true }); // stop loader\n  };\n\n  toggle = (index) => {\n    let collapse = \"isOpen\" + index;\n    this.setState((prevState) => ({ [collapse]: !prevState[collapse] }));\n  };\n\n  onInstagramSuccess = (code) => {\n    this.props.sendInstaCode(code);\n    this.setState({ loading: true });\n  };\n\n  onInstagramFailure = (params) => {\n    // console.log('onInstagramFailure ? ', params)\n  };\n\n  render() {\n    const { profile } = this.props;\n    const { loading, updated, formChange, errors } = this.state;\n\n    function pointSelect(curr) {\n      let hash = window.location.hash.substr(1);\n      if (hash === curr) return \"active\";\n      else return \"inactive\";\n    }\n\n    return (\n      <Gs.MainSection>\n        {loading ? (\n          <>\n            <BlackWrap>\n              <WhiteBX01>\n                <OnbTitle01 className=\"v2\">\n                  Please wait profile is updating\n                </OnbTitle01>\n                <LoaderBX>\n                  <img src={LoaderGif} alt=\"\" />\n                </LoaderBX>\n              </WhiteBX01>\n            </BlackWrap>\n          </>\n        ) : (\n          \"\"\n        )}\n\n        {updated ? (\n          <SuccessPopup\n            message={<FormattedMessage id=\"profile_updated\" />}\n            url=\"/user/profile\"\n          />\n        ) : (\n          \"\"\n        )}\n\n        <div style={{ minHeight: \"100vh\", width: \"100%\" }}>\n          <Gs.Container>\n            <NFTminting>\n              <Gs.W200px>\n                <Sticky>\n                  <NFTLeft>\n                    <Scrollspy\n                      items={[\n                        \"accountSettings\",\n                        \"biography\",\n                        // 'verifyProfile',\n                        \"socialLink\",\n                      ]}\n                      currentClassName=\"active\"\n                    >\n                      <Link\n                        className={pointSelect(\"accountSettings\")}\n                        to=\"#accountSettings\"\n                        smooth={true}\n                      >\n                        <FormattedMessage\n                          id=\"account_settings\"\n                          defaultMessage=\"Account Settings\"\n                        />\n                      </Link>\n                      <Link\n                        className={pointSelect(\"biography\")}\n                        to=\"#biography\"\n                        smooth={true}\n                      >\n                        <FormattedMessage\n                          id=\"about_you\"\n                          defaultMessage=\"About You\"\n                        />\n                      </Link>\n                      {/* <Link\n                        className={pointSelect('verifyProfile')}\n                        to='#verifyProfile'\n                        smooth={true}\n                      >\n                        Verify Profile\n                      </Link> */}\n                      <Link\n                        className={pointSelect(\"socialLink\")}\n                        to=\"#socialLink\"\n                        smooth={true}\n                      >\n                        <FormattedMessage\n                          id=\"social_links\"\n                          defaultMessage=\"Social Links\"\n                        />\n                      </Link>\n                    </Scrollspy>\n                  </NFTLeft>\n\n                  <BackBTN01\n                    onClick={() => this.props.history.push(\"/user/profile\")}\n                  >\n                    <FormattedMessage\n                      id=\"back_to_profile\"\n                      defaultMessage=\"Back to Profile\"\n                    />\n                  </BackBTN01>\n                </Sticky>\n              </Gs.W200px>\n              <Gs.W880px className=\"displayflex\">\n                {errors ? (\n                  <Gs.W605px>\n                    <NFTMiddle>\n                      <AlertNote>\n                        <p>{errors}</p>\n                      </AlertNote>\n                    </NFTMiddle>\n                  </Gs.W605px>\n                ) : (\n                  ``\n                )}\n\n                <Gs.W605px>\n                  <NFTMiddle>\n                    <form\n                      onChange={(e) => this.formChange(e)}\n                      onSubmit={(e) => this.formSubmit(e)}\n                    >\n                      <div id=\"accountSettings\">\n                        <NFTtitle>\n                          <h4>\n                            <FormattedMessage\n                              id=\"account_settings\"\n                              defaultMessage=\"Account Settings\"\n                            />\n                          </h4>\n                          <p className=\"mb-30\">\n                            <FormattedMessage\n                              id=\"edit_profile_form_lable\"\n                              defaultMessage=\"People visiting your profile will see the following info\"\n                            />\n                          </p>\n                        </NFTtitle>\n                        <NFTForm>\n                          <div className=\"label-line\">\n                            <label>\n                              <FormattedMessage\n                                id=\"form_name\"\n                                defaultMessage=\"Name\"\n                              />\n                            </label>\n                          </div>\n                          <FormattedMessage\n                            id=\"type_something\"\n                            defaultMessage=\"Type something…\"\n                          >\n                            {(placeholder) => (\n                              <input\n                                type=\"text\"\n                                required\n                                name=\"name\"\n                                onKeyPress={(e) => {\n                                  if (e.key === \"Enter\") {\n                                    e.preventDefault();\n                                  }\n                                }}\n                                defaultValue={\n                                  profile ? (profile.name ? profile.name : \"\") : \"\"\n                                }\n                                placeholder={placeholder}\n                              />\n                            )}\n                          </FormattedMessage>\n                        </NFTForm>\n                        <NFTForm>\n                          <div className=\"label-line\">\n                            <label>\n                              <FormattedMessage\n                                id=\"form_username\"\n                                defaultMessage=\"Username\"\n                              />\n                            </label>\n                          </div>\n                          <div className=\"iLeft\">\n                            <i>@</i>\n                            <FormattedMessage\n                              id=\"type_something\"\n                              defaultMessage=\"Type something…\"\n                            >\n                              {(placeholder) => (\n                                <input\n                                  type=\"text\"\n                                  required\n                                  name=\"username\"\n                                  onKeyPress={(e) => {\n                                    if (e.key === \"Enter\") {\n                                      e.preventDefault();\n                                    }\n                                  }}\n                                  defaultValue={\n                                    profile\n                                      ? profile.username\n                                        ? profile.username\n                                        : \"\"\n                                      : \"\"\n                                  }\n                                  placeholder={placeholder}\n                                />\n                              )}\n                            </FormattedMessage>\n                          </div>\n                          {/* <div className=\"iLeft errorinput\">\n                                                    <i>@</i>\n                                                    <input\n                                                        type=\"text\"\n                                                        name=\"description\"\n                                                        placeholder=\"Type something…\"\n                                                        defaultValue={profile?profile.username:''}\n                                                    />\n                                                    <p className=\"error\">it’s taken</p>\n                                                </div>  */}\n                        </NFTForm>\n                        <NFTForm>\n                          <div className=\"label-line\">\n                            <label>\n                              <FormattedMessage\n                                id=\"email\"\n                                defaultMessage=\"Email\"\n                              />\n                            </label>\n                            <FlexDiv className=\"JCSB\">\n                              <p>\n                                <FormattedMessage\n                                  id=\"form_email_lable\"\n                                  defaultMessage=\"Your e-mail address will not be shown on your profile\"\n                                />\n                              </p>\n                            </FlexDiv>\n                          </div>\n                          <FormattedMessage\n                            id=\"type_something\"\n                            defaultMessage=\"Type something…\"\n                          >\n                            {(placeholder) => (\n                              <input\n                                type=\"text\"\n                                required\n                                name=\"email\"\n                                onKeyPress={(e) => {\n                                  if (e.key === \"Enter\") {\n                                    e.preventDefault();\n                                  }\n                                }}\n                                defaultValue={\n                                  profile\n                                    ? profile.email\n                                      ? profile.email\n                                      : \"\"\n                                    : \"\"\n                                }\n                                placeholder={placeholder}\n                              />\n                            )}\n                          </FormattedMessage>\n                        </NFTForm>\n                      </div>\n\n                      <div id=\"biography\">\n                        <NFTtitle>\n                          <h4 className=\"mt-30\">\n                            <FormattedMessage\n                              id=\"about_you\"\n                              defaultMessage=\"About You\"\n                            />\n                          </h4>\n                          <p className=\"mb-30\">\n                            <FormattedMessage\n                              id=\"form_about_you_lable\"\n                              defaultMessage=\"Write a little bit about yourself\"\n                            />\n                          </p>\n                        </NFTtitle>\n                        <NFTForm>\n                        <FormattedMessage\n                            id=\"type_something\"\n                            defaultMessage=\"Type something…\"\n                          >\n                            {(placeholder) => (\n                              <textarea\n                                type=\"textarea\"\n                                name=\"bio\"\n                                placeholder=\"0\"\n                                onKeyPress={(e) => {\n                                  if (e.key === \"Enter\") {\n                                    e.preventDefault();\n                                  }\n                                }}\n                                defaultValue={\n                                  profile ? (profile.bio ? profile.bio : \"\") : \"\"\n                                }\n                                placeholder={placeholder}\n                              />\n                            )}\n                          </FormattedMessage>\n                        </NFTForm>\n                      </div>\n                      {/* <div id='verifyProfile'>\n                        <NFTtitle>\n                          <h4 className='mt-30'>\n                            <FormattedMessage\n                              id='verify_profile'\n                              defaultMessage='Verify your profile'\n                            />\n                          </h4>\n                          <p className='mb-30'>\n                            <FormattedMessage\n                              id='verify_profile_label'\n                              defaultMessage='Show us how authentic your profile is'\n                            />\n                          </p>\n                        </NFTtitle>\n                        <NFTForm>\n                          <CustomCheckbox1>\n                            <label className='checkbox-container'>\n                              <img src={CICON01} alt='' />\n                              <FormattedMessage\n                                id='verify_twitter'\n                                defaultMessage='Verify via Twitter'\n                              />\n                              <input\n                                onChange={(e) => {\n                                  if (e.target.checked) {\n                                    this.setState({ loading: true });\n                                    this.props.getTwitterAccessToken();\n                                  }\n                                }}\n                                checked={profile?.portfolio.twitter.isVerified}\n                                type='checkbox'\n                                name=''\n                                value='twitter'\n                              />\n                              <span className='checkmark v2'></span>\n                            </label>\n                            <label className='checkbox-container'>\n                              {!profile?.portfolio.instagarm.isVerified ? (\n                                <InstagramLogin\n                                  cssClass='background: none;'\n                                  clientId={client_id}\n                                  buttonText='Login'\n                                  redirectUri={redirect_url}\n                                  scope={['user_profile']}\n                                  onSuccess={this.onInstagramSuccess}\n                                  onFailure={this.onInstagramFailure}\n                                >\n                                  <img src={CICON02} alt='' />\n                                  <FormattedMessage\n                                    id='verify_instagram'\n                                    defaultMessage='Verify via Instagram'\n                                  />\n                                  <input\n                                    type='checkbox'\n                                    checked={\n                                      profile?.portfolio.instagarm.isVerified\n                                    }\n                                    name=''\n                                    value='intagram'\n                                  />\n                                  <span className='checkmark v2'></span>\n                                </InstagramLogin>\n                              ) : (\n                                <>\n                                  <img src={CICON02} alt='' />\n                                  <FormattedMessage\n                                    id='verify_instagram'\n                                    defaultMessage='Verify via Instagram'\n                                  />\n                                  <input\n                                    type='checkbox'\n                                    checked={\n                                      profile?.portfolio.instagarm.isVerified\n                                    }\n                                    name=''\n                                    value='intagram'\n                                  />\n                                  <span className='checkmark v2'></span>\n                                </>\n                              )}\n                            </label>\n                          </CustomCheckbox1>\n                        </NFTForm>\n                      </div> */}\n                      <div id=\"socialLink\">\n                        <NFTtitle>\n                          <h4 className=\"mt-30\">\n                            <FormattedMessage\n                              id=\"social_links\"\n                              defaultMessage=\"Social Links\"\n                            />\n                          </h4>\n                          <p className=\"mb-30\">\n                            <FormattedMessage\n                              id=\"social_links_label\"\n                              defaultMessage=\"Add your social media links for people to follow\"\n                            />\n                          </p>\n                        </NFTtitle>\n\n                        <NFTForm>\n                          <div className=\"label-line\">\n                            <label>\n                              <FormattedMessage\n                                id=\"website\"\n                                defaultMessage=\"Website\"\n                              />\n                            </label>\n                          </div>\n                          <div className=\"iLeft\">\n                            <i>\n                              <img src={CICON03} alt=\"\" />\n                            </i>\n                            <FormattedMessage\n                              id=\"type_something\"\n                              defaultMessage=\"Type something…\"\n                            >\n                              {(placeholder) => (\n                                <input\n                                  type=\"url\"\n                                  name=\"website\"\n                                  onKeyPress={(e) => {\n                                    if (e.key === \"Enter\") {\n                                      e.preventDefault();\n                                    }\n                                  }}\n                                  defaultValue={\n                                    profile\n                                      ? profile.portfolio?.website\n                                        ? profile.portfolio.website.url\n                                        : \"\"\n                                      : \"\"\n                                  }\n                                  placeholder={placeholder}\n                                />\n                              )}\n                            </FormattedMessage>\n                          </div>\n                        </NFTForm>\n                        <NFTForm>\n                          <div className=\"label-line\">\n                            <label>Twitter</label>\n                          </div>\n                          <div className=\"iLeft\">\n                            <i>\n                              <img src={CICON01} alt=\"\" />\n                            </i>\n                            <FormattedMessage\n                              id=\"type_something\"\n                              defaultMessage=\"Type something…\"\n                            >\n                              {(placeholder) => (\n                                <input\n                                  type=\"url\"\n                                  name=\"twitter\"\n                                  onKeyPress={(e) => {\n                                    if (e.key === \"Enter\") {\n                                      e.preventDefault();\n                                    }\n                                  }}\n                                  defaultValue={\n                                    profile\n                                      ? profile.portfolio?.twitter\n                                        ? profile.portfolio.twitter.url\n                                        : \"\"\n                                      : \"\"\n                                  }\n                                  placeholder={placeholder}\n                                />\n                              )}\n                            </FormattedMessage>\n                          </div>\n                        </NFTForm>\n                        <NFTForm>\n                          <div className=\"label-line\">\n                            <label>Instagram</label>\n                          </div>\n                          <div className=\"iLeft\">\n                            <i>\n                              <img src={CICON02} alt=\"\" />\n                            </i>\n                            <FormattedMessage\n                              id=\"type_something\"\n                              defaultMessage=\"Type something…\"\n                            >\n                              {(placeholder) => (\n                                <input\n                                  type=\"url\"\n                                  name=\"instagarm\"\n                                  onKeyPress={(e) => {\n                                    if (e.key === \"Enter\") {\n                                      e.preventDefault();\n                                    }\n                                  }}\n                                  defaultValue={\n                                    profile\n                                      ? profile.portfolio?.instagarm\n                                        ? profile.portfolio.instagarm.url\n                                        : \"\"\n                                      : \"\"\n                                  }\n                                  placeholder={placeholder}\n                                />\n                              )}\n                            </FormattedMessage>\n                          </div>\n                        </NFTForm>\n\n                        <NFTForm>\n                          <div className=\"label-line\">\n                            <label>Discord</label>\n                          </div>\n                          <div className=\"iLeft\">\n                            <i>\n                              <img src={CICON04} alt=\"\" />\n                            </i>\n                            <FormattedMessage\n                              id=\"type_something\"\n                              defaultMessage=\"Type something…\"\n                            >\n                              {(placeholder) => (\n                                <input\n                                  type=\"url\"\n                                  name=\"discord\"\n                                  onKeyPress={(e) => {\n                                    if (e.key === \"Enter\") {\n                                      e.preventDefault();\n                                    }\n                                  }}\n                                  defaultValue={\n                                    profile\n                                      ? profile.portfolio?.discord\n                                        ? profile.portfolio.discord.url\n                                        : \"\"\n                                      : \"\"\n                                  }\n                                  placeholder={placeholder}\n                                />\n                              )}\n                            </FormattedMessage>\n                          </div>\n                        </NFTForm>\n                        <NFTForm>\n                          <div className=\"label-line\">\n                            <label>\n                              <FormattedMessage\n                                id=\"youtube\"\n                                defaultMessage=\"YouTube\"\n                              />\n                            </label>\n                          </div>\n                          <div className=\"iLeft\">\n                            <i>\n                              <img src={CICON05} alt=\"\" />\n                            </i>\n                            <FormattedMessage\n                              id=\"type_something\"\n                              defaultMessage=\"Type something…\"\n                            >\n                              {(placeholder) => (\n                                <input\n                                  type=\"url\"\n                                  name=\"youtube\"\n                                  onKeyPress={(e) => {\n                                    if (e.key === \"Enter\") {\n                                      e.preventDefault();\n                                    }\n                                  }}\n                                  defaultValue={\n                                    profile\n                                      ? profile.portfolio?.youtube\n                                        ? profile.portfolio.youtube.url\n                                        : \"\"\n                                      : \"\"\n                                  }\n                                  placeholder={placeholder}\n                                />\n                              )}\n                            </FormattedMessage>\n                          </div>\n                        </NFTForm>\n                        <NFTForm>\n                          <div className=\"label-line\">\n                            <label>Facebook</label>\n                          </div>\n                          <div className=\"iLeft\">\n                            <i>\n                              <img src={CICON06} alt=\"\" />\n                            </i>\n                            <FormattedMessage\n                              id=\"type_something\"\n                              defaultMessage=\"Type something…\"\n                            >\n                              {(placeholder) => (\n                                <input\n                                  type=\"url\"\n                                  name=\"facebook\"\n                                  onKeyPress={(e) => {\n                                    if (e.key === \"Enter\") {\n                                      e.preventDefault();\n                                    }\n                                  }}\n                                  defaultValue={\n                                    profile\n                                      ? profile.portfolio?.facebook\n                                        ? profile.portfolio.facebook.url\n                                        : \"\"\n                                      : \"\"\n                                  } \n                                  placeholder={placeholder}\n                                />\n                              )}\n                            </FormattedMessage>\n                          </div>\n                        </NFTForm>\n                      </div>\n                      <CreateItemButton>\n                        <button\n                          type=\"submit\"\n                          disabled={!formChange ? true : false}\n                        >\n                          <FormattedMessage\n                            id=\"profile_update_button_label\"\n                            defaultMessage=\"Save Changes\"\n                          />\n                        </button>\n                      </CreateItemButton>\n                    </form>\n                  </NFTMiddle>\n                </Gs.W605px>\n              </Gs.W880px>\n            </NFTminting>\n          </Gs.Container>\n        </div>\n      </Gs.MainSection>\n    );\n  }\n}\n// Common Style Div\nconst FlexDiv = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n  .JCSB {\n    justify-content: space-between;\n  }\n`;\n\nconst NFTminting = styled(FlexDiv)`\n  align-items: flex-start;\n  position: relative;\n  margin: 60px 0px;\n  .sticky {\n    top: 20px !important;\n  }\n  .displayflex {\n    display: flex;\n    flex-wrap: wrap;\n  }\n`;\n\nconst NFTLeft = styled.div`\n  margin: 0px 10px;\n  ul {\n    padding-left: 0px;\n    margin: 0px;\n  }\n  .active {\n    color: #000000;\n    font-size: 18px;\n    font-weight: 700;\n    letter-spacing: -0.8px;\n    margin: 0px 0px 15px;\n    border-bottom: 3px solid #000;\n    padding-bottom: 5px;\n    display: inline-block;\n  }\n  a {\n    display: block;\n    margin: 0px 0px 22px;\n    font-size: 18px;\n    color: rgb(0 0 0 / 30%);\n    font-weight: 600;\n    letter-spacing: -0.8px;\n    :hover {\n      color: rgb(0 0 0 / 60%);\n    }\n    &.AdminLink {\n      color: rgb(0 186 188 / 30%);\n      :hover {\n        color: rgb(0 186 188 / 60%);\n      }\n    }\n  }\n`;\n\nconst NFTRight = styled.div`\n  margin: 0px 10px;\n`;\n\nconst NFTtitle = styled.div`\n  h4 {\n    color: #000000;\n    font-size: 24px;\n    font-weight: 700;\n    letter-spacing: -1.07px;\n    margin: 0px 0px 9px;\n    &.mt-30 {\n      margin-top: 30px;\n      ${Media.sm} {\n        margin-top: 10px;\n      }\n    }\n    &.text-till-blue {\n      color: #00DBAE;\n    }\n  }\n  p {\n    color: #000000;\n    font-size: 16px;\n    letter-spacing: -0.8px;\n    margin: 0px 0px 20px;\n    &.mb-30 {\n      margin-bottom: 30px;\n    }\n  }\n`;\n\nconst NFTfourbox = styled(FlexDiv)`\n  img.main {\n    width: 100%;\n    border-top-left-radius: 10px;\n    border-top-right-radius: 10px;\n  }\n  .NFT-home-box {\n    border-radius: 10px;\n    border: 1px solid #dddddd;\n    .NFT-home-box-inner {\n      padding: 20px 15px;\n      h4 {\n        margin: 0px 0px 10px;\n        font-size: 18px;\n        color: #000000;\n        font-weight: 600;\n        line-height: 22px;\n        letter-spacing: -0.67px;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        -webkit-line-clamp: 2;\n        display: -webkit-box;\n        -webkit-box-orient: vertical;\n        min-height: 44px;\n      }\n    }\n  }\n`;\n\nGs.W25V2 = styled(Gs.W25V2)`\n  ${NFTfourbox}.nftnift & {\n    width: 100%;\n  }\n`;\n\nGs.TenpxGutter = styled(Gs.TenpxGutter)`\n  ${NFTfourbox}.nftnift & {\n    margin: 0px;\n  }\n`;\n\nGs.W605px = styled(Gs.W605px)`\n  ${NFTminting} & {\n    ${Media.lg} {\n      max-width: 100%;\n    }\n  }\n`;\nconst NFTMiddle = styled.div`\n  margin: 0px 40px;\n  ${Media.lg} {\n    margin: 0px 15px;\n  }\n  ${Media.sm} {\n    margin: 0px;\n  }\n`;\n\nconst NFTForm = styled.div`\n  position: relative;\n  .label-line {\n    margin: 0px 0px 6px;\n    label {\n      font-size: 16px;\n      color: #8e9194;\n      letter-spacing: -0.8px;\n      font-weight: 600;\n    }\n    span {\n      color: #8e9194;\n      font-size: 12px;\n      letter-spacing: -0.6px;\n      margin-left: 6px;\n    }\n    p {\n      color: #8e9194;\n      font-size: 14px;\n      letter-spacing: -0.7px;\n      font-weight: 300;\n      margin: 0px;\n    }\n  }\n  input,\n  select {\n    width: 100%;\n    height: 54px;\n    border: 1px solid #dddddd;\n    border-radius: 10px;\n    padding: 15px;\n    font-size: 18px;\n    font-weight: 600;\n    color: #000000;\n    letter-spacing: -0.9px;\n    margin: 0px 0px 30px;\n    ::placeholder {\n      color: #000;\n      opacity: 20%;\n    }\n  }\n  textarea {\n    width: 100%;\n    height: 110px;\n    border: 1px solid #dddddd;\n    border-radius: 10px;\n    padding: 15px;\n    font-size: 18px;\n    font-weight: 600;\n    color: #000000;\n    letter-spacing: -0.9px;\n    margin: 0px 0px 30px;\n    ::placeholder {\n      color: #000;\n      opacity: 20%;\n    }\n  }\n  .iLeft {\n    position: relative;\n    i {\n      position: absolute;\n      left: 15px;\n      top: 16px;\n      font-size: 18px;\n      color: #000;\n      font-weight: bold;\n      img {\n        position: relative;\n        left: -7px;\n        top: -4px;\n      }\n    }\n    input {\n      padding-left: 45px;\n    }\n  }\n  .iRight {\n    position: relative;\n    i {\n      position: absolute;\n      right: 15px;\n      top: 17px;\n      font-size: 18px;\n      color: #000;\n      font-weight: bold;\n    }\n    input {\n      padding-right: 45px;\n    }\n  }\n  .errorinput {\n    position: relative;\n    input {\n      border-color: #ff2a44;\n    }\n    p.error {\n      color: #ff2a44;\n      font-size: 12px;\n      letter-spacing: -0.6px;\n      font-weight: 600;\n      margin: 0px;\n      position: absolute;\n      top: 18px;\n      right: 15px;\n    }\n  }\n`;\n\nconst FileuploadBox = styled(FlexDiv)`\n  border: 1px solid #dddddd;\n  border-radius: 10px;\n  width: 100%;\n  height: 100px;\n  margin: 0px 0px 60px;\n  input {\n    display: none;\n  }\n  .custom-file-upload {\n    border: 1px solid #000000;\n    border-radius: 15px;\n    font-size: 14px;\n    color: #000;\n    letter-spacing: -0.5px;\n    padding: 13px 28px;\n    cursor: pointer;\n    :hover {\n      background-color: #00DBAE;\n      color: #fff;\n    }\n  }\n`;\n\nconst CreateItemButton = styled.div`\n  margin: 50px 0px 80px;\n  button {\n    font-size: 14px;\n    color: #fff;\n    letter-spacing: -0.5px;\n    padding: 13px 60px;\n    cursor: pointer;\n    border-radius: 15px;\n    background-color: rgb(0 0 0 / 30%);\n    :hover {\n      background-color: #00DBAE;\n    }\n  }\n  ${Media.sm} {\n    margin: 30px 0px 40px;\n    text-align: center;\n  }\n`;\n\nconst CustomRadio1 = styled(FlexDiv)`\n  justify-content: flex-start;\n  margin-bottom: 30px;\n  .radio-container {\n    display: flex;\n    align-items: center;\n    position: relative;\n    height: 54px;\n    width: calc(170px - 5px);\n    margin-right: 10px;\n    cursor: pointer;\n    padding-left: 15px;\n    line-height: 54px;\n    font-weight: 700;\n    font-size: 18px;\n    letter-spacing: -0.9px;\n    color: #000;\n    img {\n      margin-right: 5px;\n    }\n  }\n  .radio-container input {\n    position: absolute;\n    left: 0;\n    opacity: 0;\n    cursor: pointer;\n    margin: 0px;\n  }\n  .checkmark {\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 54px;\n    width: 100%;\n    background-color: transparent;\n    border-radius: 10px;\n    border: 1px solid #dddddd;\n  }\n  .radio-container input:checked ~ .checkmark {\n    border: 1px solid #00DBAE;\n  }\n`;\n\nconst CustomCheckbox1 = styled(FlexDiv)`\n  justify-content: flex-start;\n  margin-bottom: 30px;\n  .checkbox-container {\n    display: flex;\n    align-items: center;\n    position: relative;\n    height: 54px;\n    width: calc(257px - 5px);\n    margin-right: 10px;\n    cursor: pointer;\n    padding-left: 15px;\n    line-height: 54px;\n    font-weight: 700;\n    font-size: 18px;\n    letter-spacing: -0.9px;\n    color: #000;\n    button {\n      display: flex;\n      align-items: center;\n      justify-content: flex-start;\n      padding: 0px;\n      letter-spacing: -0.9px;\n      font-weight: 700;\n      :hover {\n        background-color: transparent !important;\n      }\n    }\n    img {\n      margin-right: 5px;\n    }\n    ${Media.lg} {\n      margin: 0px 10px 10px 0px;\n    }\n  }\n  .checkbox-container input {\n    position: absolute;\n    left: 0;\n    opacity: 0;\n    cursor: pointer;\n    margin: 0px;\n  }\n  .checkbox-container button:hover {\n    background-color: #f7f7f7;\n  }\n  .checkmark {\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 54px;\n    width: 100%;\n    background-color: transparent;\n    border-radius: 10px;\n    border: 1px solid #dddddd;\n  }\n  .checkmark.v2:hover {\n    border: 1px solid #00DBAE;\n  }\n  .checkbox-container input:checked ~ .checkmark {\n    border: 1px solid #00DBAE;\n  }\n`;\n\nconst CollectionSelect = styled(FlexDiv)`\n  margin-bottom: 60px;\n  position: relative;\n  select {\n    margin-bottom: 0px;\n    -webkit-appearance: none;\n    background: url(${DDdownA}) no-repeat 97% 55%;\n    option {\n      border-radius: 10px;\n      box-shadow: 0 10px 20px 0 rgb(0 0 0 / 30%);\n      margin: 30px;\n    }\n  }\n  button {\n    font-size: 14px;\n    letter-spacing: -0.5px;\n    color: #000;\n    font-weight: 700;\n    border-radius: 15px;\n    border: 1px solid #000000;\n    padding: 16px 20px;\n    margin-left: 10px;\n    :hover {\n      background-color: #000;\n      color: #fff;\n    }\n  }\n`;\n\nconst AccountBX = styled(FlexDiv)`\n  position: absolute;\n  top: 37px;\n  right: 0px;\n  width: auto;\n  justify-content: flex-end;\n  padding: 8px 10px;\n  z-index: 101;\n  cursor: pointer;\n  & i {\n    width: 50px;\n    height: 50px;\n    overflow: hidden;\n    img {\n      width: 100%;\n      height: 100%;\n    }\n  }\n  & span {\n    font-size: 18px;\n    letter-spacing: -0.9px;\n    font-weight: 700;\n    color: #000;\n    display: block;\n    text-align: right;\n    line-height: 16px;\n    padding-right: 8px;\n    span {\n      font-size: 10px;\n      color: #b3b3b3;\n      width: 100%;\n      padding-right: 0;\n    }\n  }\n`;\n\nconst DDBtnbar02 = styled(FlexDiv)`\n  width: 100%;\n  button {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    height: 45px;\n    font-size: 16px;\n    font-weight: 600;\n    border-bottom: 1px solid #eef2f7;\n    & i {\n      width: 34px;\n      height: 34px;\n      margin: 0 8px;\n      overflow: hidden;\n      img {\n        width: 100%;\n        height: 100%;\n      }\n    }\n    & span {\n      margin-left: auto;\n    }\n    &:nth-last-child(01) {\n      border-bottom: 0px;\n    }\n    &:hover {\n      background-color: #d9f5f5;\n    }\n  }\n`;\n\nconst DDContainer = styled(FlexDiv)`\n  position: absolute;\n  background-color: #fff;\n  padding: 15px;\n  border-radius: 10px;\n  box-shadow: 0 10px 20px 0 rgba(0, 0, 0, 0.3);\n  top: calc(100% + 30px);\n  width: 200px;\n  left: 50%;\n  transform: translateX(-50%);\n  overflow: hidden;\n  z-index: 100;\n  &.ver2 {\n    width: 150px;\n    left: auto;\n    transform: translateX(0);\n    right: 0;\n    top: calc(100% + 20px);\n    padding: 0;\n  }\n`;\n\nconst BackBTN01 = styled.button`\n  border: 1px solid #000000;\n  border-radius: 10px;\n  padding: 0 30px;\n  height: 44px;\n  margin: 60px 0 0 6px;\n  font-size: 14px;\n  font-weight: 600;\n  letter-spacing: -0.5px;\n  :hover{\n    background:#00DBAE;\n    color:#fff;\n    border:none;\n  }\n`;\nconst LoaderBX = styled(FlexDiv)`\n  width: 100%;\n  margin: 60px auto 0 auto;\n`;\n\nconst OnbTitle01 = styled.div`\n  font-size: 26px;\n  font-weight: 600;\n  color: #000;\n  margin-bottom: 15px;\n\n  &.v2 {\n    max-width: 220px;\n    margin: 0 auto;\n    text-align: center;\n    line-height: 28px;\n  }\n`;\nconst OnbText01 = styled.div`\n  font-size: 14px;\n  font-weight: 400;\n  color: #000;\n  letter-spacing: -0.5px;\n\n  &.w100 {\n    width: 100%;\n  }\n`;\nconst BlackWrap = styled(FlexDiv)`\n  position: fixed;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.6);\n  z-index: 101;\n  backdrop-filter: blur(2px);\n`;\nconst WhiteBX01 = styled(FlexDiv)`\n  width: 100%;\n  position: relative;\n  max-width: 400px;\n  margin: 0 15px;\n  min-height: 418px;\n  padding: 50px;\n  background-color: #fff;\n  border-radius: 30px;\n  justify-content: flex-start;\n  align-content: center;\n  ${Media.xs} {\n    padding: 50px 25px;\n  }\n`;\nconst CloseBTN = styled.button`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  right: 20px;\n  top: 27px;\n  padding: 0;\n  margin: 0px;\n  :hover {\n    transform: rotate(90deg);\n  }\n  ${Media.xs} {\n    right: 15px;\n    top: 15px;\n  }\n`;\nconst AlertNote = styled.div`\n  background-color: #ffe5e9;\n  border: 1px solid #ff2a44;\n  border-radius: 10px;\n  margin: 0px 0px 40px;\n  padding: 17px 15px;\n  p {\n    margin: 0px;\n    color: #000000;\n    font-size: 16px;\n    font-weight: 600;\n    letter-spacing: -0.8px;\n  }\n`;\n\nconst mapDipatchToProps = (dispatch) => {\n  return {\n    getProfile: () => dispatch(actions.getProfile()),\n    setProfile: (params) => dispatch(actions.updateUserDetails(params)),\n    clearErrors: () => dispatch({ type: \"API_FAILED\", data: null }),\n    sendInstaCode: (code) => dispatch(actions.sendInstagramCode(code)),\n    getTwitterAccessToken: () => dispatch(actions.getTwitterAccessToken()),\n    verifyByTwitter: (token, verifier) =>\n      dispatch(actions.verifyByTwitter(token, verifier)),\n  };\n};\nconst mapStateToProps = (state) => {\n  return {\n    profile: state.fetchProfile,\n    updated: state.updateProfile,\n    error: state.fetchResponseFailed,\n    verified_by_insta: state.verified_by_instagram,\n    access_token: state.fetch_twitter_access_token,\n    verified_by_twitter: state.verified_by_twitter,\n  };\n};\n\nexport default withRouter(\n  connect(mapStateToProps, mapDipatchToProps)(ProfileEdit)\n);\n"],"sourceRoot":""}