{"version":3,"sources":["../../src/components/collapse/Collapse.jsx","Component/lang.switch.jsx"],"names":["nextFrame","callback","requestAnimationFrame","children","transition","style","render","elementType","isOpen","collapseHeight","onInit","onChange","className","addState","noAnim","overflowOnExpanded","rest","getCollapsedVisibility","useReducer","_","forceUpdate","elementRef","useRef","useState","callbackTick","setCallbackTick","state","collapse","height","visibility","current","useEffect","onCallback","params","name","setCollapsed","setTimeout","Date","now","setExpanded","getElementHeight","scrollHeight","didOpen","setCollapsing","computedStyle","overflow","ElementType","callbackRef","useCallback","node","collapseClassName","React","ref","onTransitionEnd","target","propertyName","styleHeight","connect","dispatch","setLanguage","lng","actions","props","context","useContext","Context","wrapperRef","toggle","setToggle","header","handleClickOutside","event","contains","document","addEventListener","removeEventListener","localStorage","getItem","selectLanguage","onClick","setItem","FlexDiv","styled","div","LanBTN","Media","md","DDContainer","DDBtnbar01","LanBTNF","sm","DDContainerF","DDBtnbar01F","id","defaultMessage","locale","includes"],"mappings":"40EA+BA,SAASA,EAAUC,GACjBC,uBAAsB,WAEpBA,sBAAsBD,aAI1B,gBACEE,aACAC,eACAC,UACAC,eACAC,yBAnBuB,QAoBvBC,eACAC,4BApB0B,QAqB1BC,WACAC,iBACAC,uBAzBqB,4BA0BrBC,aACAC,WACAC,uBACGC,mKAECC,EAAyB,iBAA0B,QAAnBR,EAA2B,SAAW,QAElDS,cAAW,mBAAKC,EAAI,IAAG,MAAtCC,cAELC,EAAaC,eACqBC,WAAS,MAA1CC,OAAcC,OAIfC,EAAQJ,SAAO,CACjBK,SAAUnB,EA3CC,WAHC,YA+CZH,MAAO,CACLuB,OAAQpB,EAAS,GAAKC,EACtBoB,WAAYrB,EAAS,GAAKS,OAE3Ba,QAEHC,aAAU,WAERP,GAAgBQ,EAAWrB,KAC1B,CAACa,QAMAQ,EAAa,SAAC/B,OAAUgC,yDAAS,GAC/BhC,IACuBA,EAASiC,KAClCjC,KAAWyB,MAAOA,EAAMC,SAAUtB,MAAOqB,EAAMrB,OAAU4B,eAIpDE,IACFd,EAAWS,UAGhBJ,EAAMC,SAzEM,YA6EZD,EAAMrB,MAAQ,CACZuB,OAAQnB,EACRoB,WAAYZ,KAEdG,IAEAgB,YAAW,kBAAMX,EAAgBY,KAAKC,OAAM,aA6DrCC,IACFlB,EAAWS,UAGhBJ,EAAMC,SAjJK,WAqJXD,EAAMrB,MAAQ,CACZuB,OAAQ,GACRC,WAAY,IAEdT,IAEAgB,YAAW,kBAAMX,EAAgBY,KAAKC,OAAM,aAGrCE,oBAEGnB,EAAWS,QAAQW,uBAmC3BC,EAnMS,aAmMChB,EAAMC,UApMN,cAoM+BD,EAAMC,UAE9Ce,GAAWlC,iBAjFTa,EAAWS,YAEZhB,SACKyB,IAITb,EAAMC,SA5HM,YAgIZ3B,GAAU,WACHqB,EAAWS,SAjIN,cAkINJ,EAAMC,WAEVD,EAAMrB,MAAQ,CACZuB,OAAQY,IACRX,WAAY,IAIdJ,EAAgBY,KAAKC,UA4DT9B,GAEZkC,IAAYlC,iBAnHTa,EAAWS,YAEZhB,SACKqB,IAITT,EAAMC,SA7FO,aAiGbD,EAAMrB,MAAQ,CACZuB,OAAQY,IACRX,WAAY,IAEdT,IAEApB,GAAU,WACHqB,EAAWS,SAxGL,eAyGPJ,EAAMC,WAEVD,EAAMrB,MAAQ,CACZuB,OAAQnB,EACRoB,WAAY,IAIdJ,EAAgBY,KAAKC,UAwFT9B,GAAQmC,IAMpBC,KACFC,SA9MW,aA2MXnB,EAAMC,UAAyBZ,EAAqB,GAAK,SAIzDX,cACGC,KACAqB,EAAMrB,OAEPyC,EAAcvC,EAEdwC,EAAcC,eAChB,YACMC,IACF5B,EAAWS,QAAUmB,EACrBjB,EAAWtB,EAAQ,CAAEuC,YAIzB,CAAC1C,IAGC2C,EAAoBrC,YACjBD,kBAAiBc,EAAMC,UAC1Bf,SAKFuC,gBAACL,KACCM,IAAKL,EACL1C,MAAOuC,EACPS,gCAvEuBC,WAAQC,oBAC7BD,IAAWjC,EAAWS,SAA4B,WAAjByB,EAA2B,KAC1DC,EAAcF,EAAOjD,MAAMuB,cAEHF,EAAMC,SAE1BD,EAAMC,cA1KJ,YA4Kc,KAAhB6B,GAAsBA,IAAgB/C,GAMrC8B,cAnLE,aAsLa,KAAhBiB,GAAsBA,IAAgB/C,GAMrC0B,OAiDTvB,UAAWsC,GACPlC,GAEiB,mBAAbb,EACJA,EAASuB,EAAMC,UACG,mBAAXrB,EACPA,EAAOoB,EAAMC,UACbxB,I,mKCoBKsD,sBAAQ,MANG,SAACC,GACzB,MAAO,CACLC,YAAa,SAACC,GAAD,OAASF,EAASG,IAAQF,YAAYC,QAIxCH,EAjRE,SAACK,GAChB,IAAMC,EAAUC,qBAAWC,KACrBC,EAAa5C,iBAAO,MAC1B,EAA4BC,oBAAS,GAArC,mBAAO4C,EAAP,KAAeC,EAAf,KACMC,EAASP,EAAMO,OAErBtC,qBAAU,WAIR,SAASuC,EAAmBC,GAExBL,GACAA,EAAWpC,UACVoC,EAAWpC,QAAQ0C,SAASD,EAAMjB,SAE/Ba,GAAQC,GAAU,GAM1B,OADAK,SAASC,iBAAiB,YAAaJ,GAChC,WAELG,SAASE,oBAAoB,YAAaL,MAE3C,CAACJ,EAAYC,IAChBpC,qBAAU,WACR,IAAI6B,EAAMgB,aAAaC,QAAQ,oBAC3BD,aAAaC,QAAQ,oBACrB,KACJd,EAAQe,eAAelB,GACvBE,EAAMH,YAAYC,KACjB,IAEH,IAAMmB,EAAU,SAACnB,GACfQ,GAAU,SAACD,GAAD,OAAaA,KACvBJ,EAAQe,eAAelB,GACvBgB,aAAaI,QAAQ,mBAAoBpB,GACzCE,EAAMH,YAAYC,IAGdqB,EAAUC,IAAOC,IAAV,gIAOPC,EAASF,YAAOD,EAAPC,CAAH,ugBAQJG,UAAMC,GAKVD,UAAMC,IAaJC,EAAcL,YAAOD,EAAPC,CAAH,8sBA2BbG,UAAMC,IAMJE,EAAaN,YAAOD,EAAPC,CAAH,iWAeVG,UAAMC,IAKNG,EAAUP,YAAOD,EAAPC,CAAH,yOASTG,UAAMK,IAIJC,EAAeT,YAAOD,EAAPC,CAAH,mlBA2BZU,EAAcV,YAAOD,EAAPC,CAAH,kTAkBjB,OACE,mCACGb,EACC,eAACe,EAAD,CAAQhC,IAAKc,EAAb,UACE,yBACEtD,UAAU,YACVmE,QAAS,WACPX,GAAU,SAACD,GAAD,OAAaA,MAH3B,UAME,cAAC,IAAD,CAAkB0B,GAAG,WAAWC,eAAe,SAC/C,mBAAGlF,UAAU,2BAEf,cAAC,IAAD,CACEJ,OAAQ2D,EACRvD,UACE,2CACCuD,EAAS,kBAAoB,IAJlC,SAOE,cAACoB,EAAD,UACE,eAACC,EAAD,WACE,wBACE5E,UAAWmD,EAAQgC,OAAOC,SAAS,MAAQ,SAAW,GACtDjB,QAAS,kBAAMA,EAAQ,OAFzB,iBADF,IAOI,IACF,wBACEnE,UAA8B,OAAnBmD,EAAQgC,OAAkB,SAAW,GAChDhB,QAAS,kBAAMA,EAAQ,OAFzB,0BAWR,eAACU,EAAD,CAASrC,IAAKc,EAAd,UACE,yBACEtD,UAAU,YACVmE,QAAS,WACPX,GAAU,SAACD,GAAD,OAAaA,MAH3B,UAME,cAAC,IAAD,CAAkB0B,GAAG,WAAWC,eAAe,SAC/C,mBAAGlF,UAAU,2BAEf,cAAC,IAAD,CACEJ,OAAQ2D,EACRvD,UACE,2CACCuD,EAAS,kBAAoB,IAJlC,SAOE,cAACwB,EAAD,UACE,eAACC,EAAD,WACE,wBACEhF,UAAWmD,EAAQgC,OAAOC,SAAS,MAAQ,SAAW,GACtDjB,QAAS,kBAAMA,EAAQ,OAFzB,iBADF,IAOI,IACF,wBACEnE,UAA8B,OAAnBmD,EAAQgC,OAAkB,SAAW,GAChDhB,QAAS,kBAAMA,EAAQ,OAFzB","file":"static/js/46.fb54c25b.chunk.js","sourcesContent":["/* eslint-env browser */\r\n\r\n/**\r\n * All debug logs are removed on build\r\n */\r\n\r\nimport \"./collapse.css\";\r\nimport React, {\r\n  useState,\r\n  useEffect,\r\n  useRef,\r\n  useCallback,\r\n  useReducer\r\n} from \"react\";\r\nimport debugLog from \"./debugLog\";\r\n\r\n// using let instead of const,\r\n// experimenting with ES2015 bundle which gets a bit smaller when using let over const.\r\nlet COLLAPSED = \"collapsed\";\r\nlet COLLAPSING = \"collapsing\";\r\nlet EXPANDING = \"expanding\";\r\nlet EXPANDED = \"expanded\";\r\n\r\nlet defaultClassName = \"collapse-css-transition\";\r\nlet defaultElementType = \"div\";\r\nlet defaultCollapseHeight = \"0px\";\r\n\r\n/**\r\n *\r\n * @param {function} callback\r\n */\r\nfunction nextFrame(callback) {\r\n  requestAnimationFrame(function() {\r\n    //setTimeout(callback, 0); // NOT used because can be jumpy if click-spamming.\r\n    requestAnimationFrame(callback); // This is used.\r\n  });\r\n}\r\n\r\nfunction Collapse({\r\n  children,\r\n  transition,\r\n  style,\r\n  render,\r\n  elementType = defaultElementType,\r\n  isOpen,\r\n  collapseHeight = defaultCollapseHeight,\r\n  onInit,\r\n  onChange,\r\n  className = defaultClassName,\r\n  addState,\r\n  noAnim,\r\n  overflowOnExpanded,\r\n  ...rest\r\n}) {\r\n  let getCollapsedVisibility = () => (collapseHeight === \"0px\" ? \"hidden\" : \"\");\r\n\r\n  let [__, forceUpdate] = useReducer(_ => _ + 1, 0);\r\n\r\n  let elementRef = useRef();\r\n  let [callbackTick, setCallbackTick] = useState(0);\r\n\r\n  // Avoiding setState to control when stuff are updated.\r\n  // Might not be needed.\r\n  let state = useRef({\r\n    collapse: isOpen ? EXPANDED : COLLAPSED,\r\n    style: {\r\n      height: isOpen ? \"\" : collapseHeight,\r\n      visibility: isOpen ? \"\" : getCollapsedVisibility()\r\n    }\r\n  }).current;\r\n\r\n  useEffect(() => {\r\n    // Invoke callback when data are updated, use Effect to sync state.\r\n    callbackTick && onCallback(onChange);\r\n  }, [callbackTick]);\r\n\r\n  /**\r\n   *\r\n   * @param {function} callback\r\n   */\r\n  let onCallback = (callback, params = {}) => {\r\n    if (callback) {\r\n      debugLog(\"onCallback \" + callback.name);\r\n      callback({ state: state.collapse, style: state.style, ...params });\r\n    }\r\n  };\r\n\r\n  function setCollapsed() {\r\n    if (!elementRef.current) return; // might be redundant\r\n\r\n    // Update state\r\n    state.collapse = COLLAPSED;\r\n\r\n    debugLog(\"setCollapsed\");\r\n\r\n    state.style = {\r\n      height: collapseHeight,\r\n      visibility: getCollapsedVisibility()\r\n    };\r\n    forceUpdate();\r\n\r\n    setTimeout(() => setCallbackTick(Date.now), 0); // callback and re-render\r\n  }\r\n\r\n  function setCollapsing() {\r\n    if (!elementRef.current) return; // might be redundant\r\n\r\n    if (noAnim) {\r\n      return setCollapsed();\r\n    }\r\n\r\n    // Update state\r\n    state.collapse = COLLAPSING;\r\n\r\n    debugLog(\"setCollapsing\");\r\n\r\n    state.style = {\r\n      height: getElementHeight(),\r\n      visibility: \"\"\r\n    };\r\n    forceUpdate();\r\n\r\n    nextFrame(() => {\r\n      if (!elementRef.current) return;\r\n      if (state.collapse !== COLLAPSING) return;\r\n\r\n      state.style = {\r\n        height: collapseHeight,\r\n        visibility: \"\"\r\n      };\r\n      //forceUpdate();\r\n\r\n      setCallbackTick(Date.now); // callback and re-render\r\n    });\r\n  }\r\n\r\n  function setExpanding() {\r\n    if (!elementRef.current) return; // might be redundant\r\n\r\n    if (noAnim) {\r\n      return setExpanded();\r\n    }\r\n\r\n    // Updatetate\r\n    state.collapse = EXPANDING;\r\n\r\n    debugLog(\"setExpanding\");\r\n\r\n    nextFrame(() => {\r\n      if (!elementRef.current) return; // might be redundant\r\n      if (state.collapse !== EXPANDING) return;\r\n\r\n      state.style = {\r\n        height: getElementHeight(),\r\n        visibility: \"\"\r\n      };\r\n      // forceUpdate();\r\n\r\n      setCallbackTick(Date.now); // callback and re-render\r\n    });\r\n  }\r\n\r\n  function setExpanded() {\r\n    if (!elementRef.current) return; // might be redundant\r\n\r\n    // Update state\r\n    state.collapse = EXPANDED;\r\n\r\n    debugLog(\"setExpanded\");\r\n\r\n    state.style = {\r\n      height: \"\",\r\n      visibility: \"\"\r\n    };\r\n    forceUpdate();\r\n\r\n    setTimeout(() => setCallbackTick(Date.now), 0); // callback and re-render\r\n  }\r\n\r\n  function getElementHeight() {\r\n    // @ts-ignore\r\n    return `${elementRef.current.scrollHeight}px`;\r\n  }\r\n\r\n  function onTransitionEnd({ target, propertyName }) {\r\n    if (target === elementRef.current && propertyName === \"height\") {\r\n      let styleHeight = target.style.height;\r\n\r\n      debugLog(\"onTransitionEnd\", state.collapse, propertyName, styleHeight);\r\n\r\n      switch (state.collapse) {\r\n        case EXPANDING:\r\n          if (styleHeight === \"\" || styleHeight === collapseHeight)\r\n            // This is stale, a newer event has happened before this could execute\r\n            console.warn(\r\n              `onTransitionEnd height unexpected ${styleHeight}`,\r\n              \"ignore setExpanded\"\r\n            );\r\n          else setExpanded();\r\n          break;\r\n        case COLLAPSING:\r\n          if (styleHeight === \"\" || styleHeight !== collapseHeight)\r\n            // This is stale, a newer event has happened before this could execute\r\n            console.warn(\r\n              `onTransitionEnd height unexpected ${styleHeight}`,\r\n              \"ignore setCollapsed\"\r\n            );\r\n          else setCollapsed();\r\n          break;\r\n        default:\r\n          console.warn(\"Ignored in onTransitionEnd\", state.collapse);\r\n      }\r\n    }\r\n  }\r\n\r\n  // getDerivedStateFromProps\r\n  let didOpen = state.collapse === EXPANDED || state.collapse === EXPANDING;\r\n\r\n  if (!didOpen && isOpen) setExpanding();\r\n\r\n  if (didOpen && !isOpen) setCollapsing();\r\n  // END getDerivedStateFromProps\r\n\r\n  let overflow =\r\n    state.collapse === EXPANDED && overflowOnExpanded ? \"\" : \"hidden\";\r\n\r\n  let computedStyle = {\r\n    overflow,\r\n    transition,\r\n    ...style,\r\n    ...state.style\r\n  };\r\n  let ElementType = elementType;\r\n\r\n  let callbackRef = useCallback(\r\n    node => {\r\n      if (node) {\r\n        elementRef.current = node;\r\n        onCallback(onInit, { node });\r\n        debugLog(\"callback ref\");\r\n      }\r\n    },\r\n    [elementType]\r\n  );\r\n\r\n  let collapseClassName = addState\r\n    ? `${className} --c-${state.collapse}`\r\n    : className;\r\n\r\n  debugLog(\"Render\");\r\n\r\n  return (\r\n    <ElementType\r\n      ref={callbackRef}\r\n      style={computedStyle}\r\n      onTransitionEnd={onTransitionEnd}\r\n      className={collapseClassName}\r\n      {...rest}\r\n    >\r\n      {typeof children === \"function\"\r\n        ? children(state.collapse)\r\n        : typeof render === \"function\"\r\n        ? render(state.collapse)\r\n        : children}\r\n    </ElementType>\r\n  );\r\n}\r\n\r\nexport default Collapse;\r\n","import React, { useContext, useState, useRef, useEffect } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport styled from \"styled-components\";\r\nimport Collapse from \"@kunukn/react-collapse\";\r\n\r\nimport { Context } from \"./wrapper\";\r\nimport Media from \"../Theme/media-breackpoint\";\r\nimport { connect } from \"react-redux\";\r\nimport { actions } from \"../actions\";\r\n\r\nconst Language = (props) => {\r\n  const context = useContext(Context);\r\n  const wrapperRef = useRef(null);\r\n  const [toggle, setToggle] = useState(false);\r\n  const header = props.header;\r\n\r\n  useEffect(() => {\r\n    /**\r\n     * Alert if clicked on outside of element\r\n     */\r\n    function handleClickOutside(event) {\r\n      if (\r\n        wrapperRef &&\r\n        wrapperRef.current &&\r\n        !wrapperRef.current.contains(event.target)\r\n      ) {\r\n        if (toggle) setToggle(false);\r\n      }\r\n    }\r\n\r\n    // Bind the event listener\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => {\r\n      // Unbind the event listener on clean up\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, [wrapperRef, toggle]);\r\n  useEffect(() => {\r\n    let lng = localStorage.getItem(\"avangartLanguage\")\r\n      ? localStorage.getItem(\"avangartLanguage\")\r\n      : \"en\";\r\n    context.selectLanguage(lng);\r\n    props.setLanguage(lng);\r\n  }, []);\r\n\r\n  const onClick = (lng) => {\r\n    setToggle((toggle) => !toggle);\r\n    context.selectLanguage(lng);\r\n    localStorage.setItem(\"avangartLanguage\", lng);\r\n    props.setLanguage(lng);\r\n  };\r\n\r\n  const FlexDiv = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-wrap: wrap;\r\n  `;\r\n\r\n  const LanBTN = styled(FlexDiv)`\r\n    margin-left: 30px;\r\n    position: relative;\r\n    button {\r\n      font-size: 12px;\r\n      font-weight: 600;\r\n      color: #000;\r\n      &.Lang-text {\r\n        ${Media.md} {\r\n          display: none;\r\n        }\r\n      }\r\n    }\r\n    ${Media.md} {\r\n      position: absolute;\r\n      right: 60px;\r\n      left: auto;\r\n      top: 0px;\r\n      .app__collapse {\r\n        opacity: 1;\r\n        overflow: visible !important;\r\n        visibility: visible !important;\r\n        height: auto !important;\r\n      }\r\n    }\r\n  `;\r\n  const DDContainer = styled(FlexDiv)`\r\n    position: absolute;\r\n    background-color: #fff;\r\n    padding: 15px;\r\n    border-radius: 20px;\r\n    box-shadow: 0 10px 20px 0 rgba(0, 0, 0, 0.3);\r\n    top: calc(100% + 30px);\r\n    width: 200px;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n    overflow: hidden;\r\n    z-index: 100;\r\n    &.ver2 {\r\n      width: 300px;\r\n      left: auto;\r\n      transform: translateX(0);\r\n      right: 0;\r\n      top: calc(100% + 20px);\r\n      padding: 0;\r\n    }\r\n    &.ver3 {\r\n      width: 300px;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n      top: calc(100% + 34px);\r\n      padding: 0;\r\n    }\r\n    ${Media.md} {\r\n      box-shadow: none;\r\n      width: max-content;\r\n      padding: 0px;\r\n    }\r\n  `;\r\n  const DDBtnbar01 = styled(FlexDiv)`\r\n    font-size: 16px;\r\n    color: #b3b3b3;\r\n    font-weight: 600;\r\n    button {\r\n      font-size: 16px;\r\n      padding: 0 10px;\r\n      margin: 0 6px;\r\n      color: #b3b3b3;\r\n      &.active {\r\n        color: #000;\r\n      }\r\n      :hover {\r\n        color: #000;\r\n      }\r\n      ${Media.md} {\r\n        font-size: 18px;\r\n      }\r\n    }\r\n  `;\r\n  const LanBTNF = styled(FlexDiv)`\r\n    margin-left: 30px;\r\n    position: relative;\r\n    margin-top: 50px;\r\n    button {\r\n      font-size: 12px;\r\n      font-weight: 400;\r\n      color: #fff;\r\n    }\r\n    ${Media.sm}{\r\n      margin-top: 32px;\r\n    }\r\n  `;\r\n  const DDContainerF = styled(FlexDiv)`\r\n    position: absolute;\r\n    background-color: #fff;\r\n    padding: 15px;\r\n    border-radius: 20px;\r\n    box-shadow: 0 10px 20px 0 rgba(0, 0, 0, 0.3);\r\n    bottom: calc(100% + 5px);\r\n    width: 200px;\r\n    right: 0;\r\n    overflow: hidden;\r\n    z-index: 100;\r\n    &.ver2 {\r\n      width: 300px;\r\n      left: auto;\r\n      transform: translateX(0);\r\n      right: 0;\r\n      top: calc(100% + 20px);\r\n      padding: 0;\r\n    }\r\n    &.ver3 {\r\n      width: 300px;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n      top: calc(100% + 34px);\r\n      padding: 0;\r\n    }\r\n  `;\r\n  const DDBtnbar01F = styled(FlexDiv)`\r\n    font-size: 16px;\r\n    color: #b3b3b3;\r\n    font-weight: 600;\r\n    button {\r\n      font-size: 16px;\r\n      padding: 0 10px;\r\n      margin: 0 6px;\r\n      color: #b3b3b3;\r\n      &.active {\r\n        color: #000;\r\n      }\r\n      :hover {\r\n        color: #000;\r\n      }\r\n    }\r\n  `;\r\n\r\n  return (\r\n    <>\r\n      {header ? (\r\n        <LanBTN ref={wrapperRef}>\r\n          <button\r\n            className=\"Lang-text\"\r\n            onClick={() => {\r\n              setToggle((toggle) => !toggle);\r\n            }}\r\n          >\r\n            <FormattedMessage id=\"language\" defaultMessage=\"LANG\" />\r\n            <i className=\"fas fa-chevron-down\"></i>\r\n          </button>\r\n          <Collapse\r\n            isOpen={toggle}\r\n            className={\r\n              \"app__collapse collapse-css-transition  \" +\r\n              (toggle ? \"collapse-active\" : \"\")\r\n            }\r\n          >\r\n            <DDContainer>\r\n              <DDBtnbar01>\r\n                <button\r\n                  className={context.locale.includes(\"en\") ? \"active\" : \"\"}\r\n                  onClick={() => onClick(\"en\")}\r\n                >\r\n                  ENG\r\n                </button>\r\n                |{\" \"}\r\n                <button\r\n                  className={context.locale === \"tr\" ? \"active\" : \"\"}\r\n                  onClick={() => onClick(\"tr\")}\r\n                >\r\n                  TU\r\n                </button>\r\n              </DDBtnbar01>\r\n            </DDContainer>\r\n          </Collapse>\r\n        </LanBTN>\r\n      ) : (\r\n        <LanBTNF ref={wrapperRef}>\r\n          <button\r\n            className=\"Lang-text\"\r\n            onClick={() => {\r\n              setToggle((toggle) => !toggle);\r\n            }}\r\n          >\r\n            <FormattedMessage id=\"language\" defaultMessage=\"LANG\" />\r\n            <i className=\"fas fa-chevron-down\"></i>\r\n          </button>\r\n          <Collapse\r\n            isOpen={toggle}\r\n            className={\r\n              \"app__collapse collapse-css-transition  \" +\r\n              (toggle ? \"collapse-active\" : \"\")\r\n            }\r\n          >\r\n            <DDContainerF>\r\n              <DDBtnbar01F>\r\n                <button\r\n                  className={context.locale.includes(\"en\") ? \"active\" : \"\"}\r\n                  onClick={() => onClick(\"en\")}\r\n                >\r\n                  ENG\r\n                </button>\r\n                |{\" \"}\r\n                <button\r\n                  className={context.locale === \"tr\" ? \"active\" : \"\"}\r\n                  onClick={() => onClick(\"tr\")}\r\n                >\r\n                  TU\r\n                </button>\r\n              </DDBtnbar01F>\r\n            </DDContainerF>\r\n          </Collapse>\r\n        </LanBTNF>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapDipatchToProps = (dispatch) => {\r\n  return {\r\n    setLanguage: (lng) => dispatch(actions.setLanguage(lng)),\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDipatchToProps)(Language);\r\n"],"sourceRoot":""}