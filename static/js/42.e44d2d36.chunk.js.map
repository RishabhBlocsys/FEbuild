{"version":3,"sources":["Assets/images/closeBTN01.svg","../node_modules/react-intl/lib/src/components/message.js","../node_modules/react-intl/lib/src/components/useIntl.js","Assets/images/dd-down-arrow.svg","Component/Modals/sucessPopup.jsx","Assets/images/peSocICO-01.svg","Assets/images/peSocICO-02.svg","Assets/images/peSocICO-03.svg","Assets/images/peSocICO-04.svg","Assets/images/peSocICO-05.svg","Assets/images/peSocICO-06.svg","Pages/profile-edit.jsx"],"names":["FormattedMessage","props","intl","React","Context","invariantIntlContext","useIntl","formatMessage","_a","textComponent","Text","id","description","defaultMessage","values","children","_b","tagName","Component","nodes","ignoreTag","Array","isArray","toArray","displayName","MemoizedFormattedMessage","prevProps","nextProps","otherProps","__rest","nextValues","nextOtherProps","shallowEqual","SuccessPopup","toggle","index","collapse","setState","prevState","state","isOpen1","this","message","url","BlackWrap","WhiteBX01","CloseBTN","className","onClick","src","CloseBTN01","alt","TokenBox","history","push","FlexDiv","styled","div","Media","xs","button","withRouter","ProfileEdit","formChange","e","userObj","target","name","portfolio","value","formSubmit","preventDefault","loading","updated","params","username","email","bio","setProfile","errors","profileUpdated","data","getProfile","onInstagramSuccess","code","sendInstaCode","onInstagramFailure","oauth_token","a","profile","Query","URLSearchParams","location","search","get","verifyByTwitter","error","verified_by_insta","access_token","verified_by_twitter","window","open","redirect_uri","clearErrors","pointSelect","curr","hash","substr","MainSection","OnbTitle01","LoaderBX","LoaderGif","style","minHeight","width","Container","NFTminting","W200px","NFTLeft","items","currentClassName","to","smooth","BackBTN01","W880px","W605px","NFTMiddle","AlertNote","onChange","onSubmit","NFTtitle","NFTForm","placeholder","type","required","onKeyPress","key","defaultValue","CICON03","website","CICON01","twitter","CICON02","instagarm","CICON04","discord","CICON05","youtube","CICON06","facebook","CreateItemButton","disabled","sm","NFTfourbox","Gs","W25V2","TenpxGutter","lg","DDdownA","connect","fetchProfile","updateProfile","fetchResponseFailed","verified_by_instagram","fetch_twitter_access_token","dispatch","actions","updateUserDetails","sendInstagramCode","getTwitterAccessToken","token","verifier"],"mappings":"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","file":"static/js/42.e44d2d36.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/closeBTN01.bef0773d.svg\";","/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport useIntl from './useIntl';\nimport { shallowEqual } from '../utils';\nfunction areEqual(prevProps, nextProps) {\n    var values = prevProps.values, otherProps = __rest(prevProps, [\"values\"]);\n    var nextValues = nextProps.values, nextOtherProps = __rest(nextProps, [\"values\"]);\n    return (shallowEqual(nextValues, values) &&\n        shallowEqual(otherProps, nextOtherProps));\n}\nfunction FormattedMessage(props) {\n    var intl = useIntl();\n    var formatMessage = intl.formatMessage, _a = intl.textComponent, Text = _a === void 0 ? React.Fragment : _a;\n    var id = props.id, description = props.description, defaultMessage = props.defaultMessage, values = props.values, children = props.children, _b = props.tagName, Component = _b === void 0 ? Text : _b, ignoreTag = props.ignoreTag;\n    var descriptor = { id: id, description: description, defaultMessage: defaultMessage };\n    var nodes = formatMessage(descriptor, values, {\n        ignoreTag: ignoreTag,\n    });\n    if (typeof children === 'function') {\n        return children(Array.isArray(nodes) ? nodes : [nodes]);\n    }\n    if (Component) {\n        return React.createElement(Component, null, React.Children.toArray(nodes));\n    }\n    return React.createElement(React.Fragment, null, nodes);\n}\nFormattedMessage.displayName = 'FormattedMessage';\nvar MemoizedFormattedMessage = React.memo(FormattedMessage, areEqual);\nMemoizedFormattedMessage.displayName = 'MemoizedFormattedMessage';\nexport default MemoizedFormattedMessage;\n","import * as React from 'react';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils';\nexport default function useIntl() {\n    var intl = React.useContext(Context);\n    invariantIntlContext(intl);\n    return intl;\n}\n","export default __webpack_public_path__ + \"static/media/dd-down-arrow.4846e584.svg\";","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { withRouter } from \"react-router\";\r\nimport CloseBTN01 from \"../../Assets/images/closeBTN01.svg\";\r\nimport Media from '../../Theme/media-breackpoint';\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\n\r\nclass SuccessPopup extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isOpen1: false,\r\n    };\r\n  }\r\n\r\n  toggle = (index) => {\r\n    let collapse = \"isOpen\" + index;\r\n    this.setState((prevState) => ({ [collapse]: !prevState[collapse] }));\r\n  }\r\n\r\n  render() {\r\n    const { message, url } = this.props;\r\n    const { isOpen1 } = this.state\r\n    return (\r\n      <>\r\n        {!isOpen1 ?\r\n          <BlackWrap>\r\n            <WhiteBX01>\r\n              <CloseBTN className=\"ani-1\" onClick={() => this.toggle(1)}>\r\n                {\" \"}\r\n                <img src={CloseBTN01} alt=\"\" />{\" \"}\r\n              </CloseBTN>\r\n              <TokenBox >\r\n                <p >{message}</p>\r\n                <button onClick={() => this.props.history.push(url)}>\r\n                  <FormattedMessage id=\"view\" defaultMessage=\"View\" />\r\n                </button>\r\n              </TokenBox>\r\n            </WhiteBX01>\r\n          </BlackWrap>\r\n          : ''}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst FlexDiv = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  .JCSB {\r\n    justify-content: space-between;\r\n  }\r\n`;\r\nconst BlackWrap = styled(FlexDiv)`\r\n  position: fixed;\r\n  left: 0;\r\n  right: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.6);\r\n  z-index: 101;\r\n  backdrop-filter: blur(2px);\r\n`;\r\nconst WhiteBX01 = styled(FlexDiv)`\r\n  width: 100%;\r\n  position: relative;\r\n  max-width: 400px;\r\n  margin: 0 15px;\r\n  min-height: 418px;\r\n  padding: 50px;\r\n  background-color: #fff;\r\n  border-radius: 30px;\r\n  justify-content: flex-start;\r\n  align-content: center;\r\n  ${Media.xs}{\r\n    padding:50px 25px;\r\n  }\r\n`;\r\nconst CloseBTN = styled.button`\r\n  width: 20px;\r\n  height: 20px;\r\n  position: absolute;\r\n  right: 20px;\r\n  top: 27px;\r\n  padding: 0;\r\n  margin: 0px;\r\n  :hover {\r\n    transform: rotate(90deg);\r\n  }\r\n  ${Media.xs}{\r\n    right: 15px;\r\n    top: 15px;\r\n  }\r\n`;\r\nconst TokenBox = styled(FlexDiv)`\r\n  justify-content: center;\r\n  width: 100%;\r\n  margin-bottom: 20px;\r\n  button {\r\n    color: #000000;\r\n    font-size: 14px;\r\n    font-weight: 700;\r\n    letter-spacing: -0.5px;\r\n    padding: 13px 35px;\r\n    border-radius: 15px;\r\n    border: 1px solid #000000;\r\n    :hover {\r\n      background-color: #000;\r\n      color: #fff;\r\n    }\r\n  }\r\n  p {\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nexport default withRouter(SuccessPopup);","export default __webpack_public_path__ + \"static/media/peSocICO-01.63d20851.svg\";","export default __webpack_public_path__ + \"static/media/peSocICO-02.39e62702.svg\";","export default __webpack_public_path__ + \"static/media/peSocICO-03.1a410159.svg\";","export default __webpack_public_path__ + \"static/media/peSocICO-04.95b6ad5f.svg\";","export default __webpack_public_path__ + \"static/media/peSocICO-05.ed4b2fd1.svg\";","export default __webpack_public_path__ + \"static/media/peSocICO-06.70b3bf0e.svg\";","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Gs from \"../Theme/globalStyles\";\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { HashLink as Link } from \"react-router-hash-link\";\r\nimport { withRouter } from \"react-router\";\r\nimport Sticky from \"react-sticky-el\";\r\n\r\nimport DDdownA from \"../Assets/images/dd-down-arrow.svg\";\r\nimport CICON01 from \"../Assets/images/peSocICO-01.svg\";\r\nimport CICON02 from \"../Assets/images/peSocICO-02.svg\";\r\nimport CICON03 from \"../Assets/images/peSocICO-03.svg\";\r\nimport CICON04 from \"../Assets/images/peSocICO-04.svg\";\r\nimport CICON05 from \"../Assets/images/peSocICO-05.svg\";\r\nimport CICON06 from \"../Assets/images/peSocICO-06.svg\";\r\nimport LoaderGif from \"../Assets/images/loading.gif\";\r\nimport SuccessPopup from \"../Component/Modals/sucessPopup\";\r\n\r\nimport { actions } from \"../actions\";\r\nimport { client_id, redirect_url } from \"../config\";\r\nimport Media from \"../Theme/media-breackpoint\";\r\nimport Scrollspy from \"react-scrollspy\";\r\n\r\nclass ProfileEdit extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      errors: null,\r\n      loading: false,\r\n      updated: false,\r\n      userObj: null,\r\n      formChange: false,\r\n      oauth_token: null,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const { profile } = this.props;\r\n    if (!profile) {\r\n      this.props.getProfile(); // fetch profile\r\n    } else {\r\n      this.setState({ userObj: profile });\r\n    }\r\n    let Query = new URLSearchParams(this.props.location.search);\r\n    if (Query.get(\"oauth_token\") && Query.get(\"oauth_verifier\")) {\r\n      this.props.verifyByTwitter(\r\n        Query.get(\"oauth_token\"),\r\n        Query.get(\"oauth_verifier\")\r\n      ); // verify via twitter\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    let {\r\n      profile,\r\n      updated,\r\n      error,\r\n      verified_by_insta,\r\n      access_token,\r\n      verified_by_twitter,\r\n    } = this.props;\r\n    if (profile !== prevProps.profile) {\r\n      this.setState({ userObj: profile }); // store props into state\r\n    }\r\n    if (updated !== prevProps.updated) {\r\n      this.profileUpdated(updated); // profile updated\r\n    }\r\n    if (verified_by_insta !== prevProps.verified_by_insta) {\r\n      this.profileUpdated(updated); // verified by instagram\r\n    }\r\n    if (verified_by_twitter !== prevProps.verified_by_twitter) {\r\n      this.profileUpdated(updated); // verified by twitter\r\n    }\r\n    if (access_token !== prevProps.access_token) {\r\n      // console.log('access_token ? ', access_token)\r\n      window.open(access_token.redirect_uri, \"_self\");\r\n    }\r\n    if (error !== prevProps.error) {\r\n      if (error) {\r\n        this.setState({ errors: error, loading: false }); // set api error into state\r\n        this.props.clearErrors(); // clear the error\r\n      }\r\n    }\r\n  }\r\n\r\n  formChange = (e) => {\r\n    const { userObj, formChange } = this.state;\r\n    if (\r\n      e.target.name === \"website\" ||\r\n      e.target.name === \"instagarm\" ||\r\n      e.target.name === \"facebook\" ||\r\n      e.target.name === \"github\" ||\r\n      e.target.name === \"twitter\" ||\r\n      e.target.name === \"discord\" ||\r\n      e.target.name === \"youtube\" ||\r\n      e.target.name === \"twitch\" ||\r\n      e.target.name === \"tiktok\" ||\r\n      e.target.name === \"snapchat\"\r\n    ) {\r\n      if (userObj.portfolio) {\r\n        this.setState({\r\n          formChange: true,\r\n          userObj: {\r\n            ...userObj,\r\n            portfolio: {\r\n              ...userObj.portfolio,\r\n              [e.target.name]: {\r\n                ...userObj.portfolio[e.target.name],\r\n                url: e.target.value,\r\n              },\r\n            },\r\n          },\r\n        });\r\n      } else {\r\n        this.setState({\r\n          formChange: true,\r\n          userObj: {\r\n            ...userObj,\r\n            portfolio: { [e.target.name]: e.target.value },\r\n          },\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        formChange: true,\r\n        userObj: { ...userObj, [e.target.name]: e.target.value },\r\n      });\r\n    }\r\n  };\r\n\r\n  formSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      loading: true,\r\n      updated: false,\r\n      formChange: false,\r\n    }); // start the loader\r\n    const { userObj } = this.state;\r\n    let params = {\r\n      name: userObj.name,\r\n      username: userObj.username,\r\n      email: userObj.email,\r\n      bio: userObj.bio,\r\n      portfolio: userObj.portfolio,\r\n    };\r\n    this.props.setProfile(params); // update the user profile\r\n    this.setState({ errors: null });\r\n  };\r\n\r\n  profileUpdated = (data) => {\r\n    this.props.getProfile(); // fetch profile\r\n    this.setState({ loading: false, updated: true }); // stop loader\r\n  };\r\n\r\n  toggle = (index) => {\r\n    let collapse = \"isOpen\" + index;\r\n    this.setState((prevState) => ({ [collapse]: !prevState[collapse] }));\r\n  };\r\n\r\n  onInstagramSuccess = (code) => {\r\n    this.props.sendInstaCode(code);\r\n    this.setState({ loading: true });\r\n  };\r\n\r\n  onInstagramFailure = (params) => {\r\n    // console.log('onInstagramFailure ? ', params)\r\n  };\r\n\r\n  render() {\r\n    const { profile } = this.props;\r\n    const { loading, updated, formChange, errors } = this.state;\r\n\r\n    function pointSelect(curr) {\r\n      let hash = window.location.hash.substr(1);\r\n      if (hash === curr) return \"active\";\r\n      else return \"inactive\";\r\n    }\r\n\r\n    return (\r\n      <Gs.MainSection>\r\n        {loading ? (\r\n          <>\r\n            <BlackWrap>\r\n              <WhiteBX01>\r\n                <OnbTitle01 className=\"v2\">\r\n                  Please wait profile is updating\r\n                </OnbTitle01>\r\n                <LoaderBX>\r\n                  <img src={LoaderGif} alt=\"\" />\r\n                </LoaderBX>\r\n              </WhiteBX01>\r\n            </BlackWrap>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n\r\n        {updated ? (\r\n          <SuccessPopup\r\n            message={<FormattedMessage id=\"profile_updated\" />}\r\n            url=\"/user/profile\"\r\n          />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n\r\n        <div style={{ minHeight: \"100vh\", width: \"100%\" }}>\r\n          <Gs.Container>\r\n            <NFTminting>\r\n              <Gs.W200px>\r\n                <Sticky>\r\n                  <NFTLeft>\r\n                    <Scrollspy\r\n                      items={[\r\n                        \"accountSettings\",\r\n                        \"biography\",\r\n                        // 'verifyProfile',\r\n                        \"socialLink\",\r\n                      ]}\r\n                      currentClassName=\"active\"\r\n                    >\r\n                      <Link\r\n                        className={pointSelect(\"accountSettings\")}\r\n                        to=\"#accountSettings\"\r\n                        smooth={true}\r\n                      >\r\n                        <FormattedMessage\r\n                          id=\"account_settings\"\r\n                          defaultMessage=\"Account Settings\"\r\n                        />\r\n                      </Link>\r\n                      <Link\r\n                        className={pointSelect(\"biography\")}\r\n                        to=\"#biography\"\r\n                        smooth={true}\r\n                      >\r\n                        <FormattedMessage\r\n                          id=\"about_you\"\r\n                          defaultMessage=\"About You\"\r\n                        />\r\n                      </Link>\r\n                      {/* <Link\r\n                        className={pointSelect('verifyProfile')}\r\n                        to='#verifyProfile'\r\n                        smooth={true}\r\n                      >\r\n                        Verify Profile\r\n                      </Link> */}\r\n                      <Link\r\n                        className={pointSelect(\"socialLink\")}\r\n                        to=\"#socialLink\"\r\n                        smooth={true}\r\n                      >\r\n                        <FormattedMessage\r\n                          id=\"social_links\"\r\n                          defaultMessage=\"Social Links\"\r\n                        />\r\n                      </Link>\r\n                    </Scrollspy>\r\n                  </NFTLeft>\r\n\r\n                  <BackBTN01\r\n                    onClick={() => this.props.history.push(\"/user/profile\")}\r\n                  >\r\n                    <FormattedMessage\r\n                      id=\"back_to_profile\"\r\n                      defaultMessage=\"Back to Profile\"\r\n                    />\r\n                  </BackBTN01>\r\n                </Sticky>\r\n              </Gs.W200px>\r\n              <Gs.W880px className=\"displayflex\">\r\n                {errors ? (\r\n                  <Gs.W605px>\r\n                    <NFTMiddle>\r\n                      <AlertNote>\r\n                        <p>{errors}</p>\r\n                      </AlertNote>\r\n                    </NFTMiddle>\r\n                  </Gs.W605px>\r\n                ) : (\r\n                  ``\r\n                )}\r\n\r\n                <Gs.W605px>\r\n                  <NFTMiddle>\r\n                    <form\r\n                      onChange={(e) => this.formChange(e)}\r\n                      onSubmit={(e) => this.formSubmit(e)}\r\n                    >\r\n                      <div id=\"accountSettings\">\r\n                        <NFTtitle>\r\n                          <h4>\r\n                            <FormattedMessage\r\n                              id=\"account_settings\"\r\n                              defaultMessage=\"Account Settings\"\r\n                            />\r\n                          </h4>\r\n                          <p className=\"mb-30\">\r\n                            <FormattedMessage\r\n                              id=\"edit_profile_form_lable\"\r\n                              defaultMessage=\"People visiting your profile will see the following info\"\r\n                            />\r\n                          </p>\r\n                        </NFTtitle>\r\n                        <NFTForm>\r\n                          <div className=\"label-line\">\r\n                            <label>\r\n                              <FormattedMessage\r\n                                id=\"form_name\"\r\n                                defaultMessage=\"Name\"\r\n                              />\r\n                            </label>\r\n                          </div>\r\n                          <FormattedMessage\r\n                            id=\"type_something\"\r\n                            defaultMessage=\"Type something…\"\r\n                          >\r\n                            {(placeholder) => (\r\n                              <input\r\n                                type=\"text\"\r\n                                required\r\n                                name=\"name\"\r\n                                onKeyPress={(e) => {\r\n                                  if (e.key === \"Enter\") {\r\n                                    e.preventDefault();\r\n                                  }\r\n                                }}\r\n                                defaultValue={\r\n                                  profile ? (profile.name ? profile.name : \"\") : \"\"\r\n                                }\r\n                                placeholder={placeholder}\r\n                              />\r\n                            )}\r\n                          </FormattedMessage>\r\n                        </NFTForm>\r\n                        <NFTForm>\r\n                          <div className=\"label-line\">\r\n                            <label>\r\n                              <FormattedMessage\r\n                                id=\"form_username\"\r\n                                defaultMessage=\"Username\"\r\n                              />\r\n                            </label>\r\n                          </div>\r\n                          <div className=\"iLeft\">\r\n                            <i>@</i>\r\n                            <FormattedMessage\r\n                              id=\"type_something\"\r\n                              defaultMessage=\"Type something…\"\r\n                            >\r\n                              {(placeholder) => (\r\n                                <input\r\n                                  type=\"text\"\r\n                                  required\r\n                                  name=\"username\"\r\n                                  onKeyPress={(e) => {\r\n                                    if (e.key === \"Enter\") {\r\n                                      e.preventDefault();\r\n                                    }\r\n                                  }}\r\n                                  defaultValue={\r\n                                    profile\r\n                                      ? profile.username\r\n                                        ? profile.username\r\n                                        : \"\"\r\n                                      : \"\"\r\n                                  }\r\n                                  placeholder={placeholder}\r\n                                />\r\n                              )}\r\n                            </FormattedMessage>\r\n                          </div>\r\n                          {/* <div className=\"iLeft errorinput\">\r\n                                                    <i>@</i>\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        name=\"description\"\r\n                                                        placeholder=\"Type something…\"\r\n                                                        defaultValue={profile?profile.username:''}\r\n                                                    />\r\n                                                    <p className=\"error\">it’s taken</p>\r\n                                                </div>  */}\r\n                        </NFTForm>\r\n                        <NFTForm>\r\n                          <div className=\"label-line\">\r\n                            <label>\r\n                              <FormattedMessage\r\n                                id=\"email\"\r\n                                defaultMessage=\"Email\"\r\n                              />\r\n                            </label>\r\n                            <FlexDiv className=\"JCSB\">\r\n                              <p>\r\n                                <FormattedMessage\r\n                                  id=\"form_email_lable\"\r\n                                  defaultMessage=\"Your e-mail adress will not be shown on your profile\"\r\n                                />\r\n                              </p>\r\n                            </FlexDiv>\r\n                          </div>\r\n                          <FormattedMessage\r\n                            id=\"type_something\"\r\n                            defaultMessage=\"Type something…\"\r\n                          >\r\n                            {(placeholder) => (\r\n                              <input\r\n                                type=\"text\"\r\n                                required\r\n                                name=\"email\"\r\n                                onKeyPress={(e) => {\r\n                                  if (e.key === \"Enter\") {\r\n                                    e.preventDefault();\r\n                                  }\r\n                                }}\r\n                                defaultValue={\r\n                                  profile\r\n                                    ? profile.email\r\n                                      ? profile.email\r\n                                      : \"\"\r\n                                    : \"\"\r\n                                }\r\n                                placeholder={placeholder}\r\n                              />\r\n                            )}\r\n                          </FormattedMessage>\r\n                        </NFTForm>\r\n                      </div>\r\n\r\n                      <div id=\"biography\">\r\n                        <NFTtitle>\r\n                          <h4 className=\"mt-30\">\r\n                            <FormattedMessage\r\n                              id=\"about_you\"\r\n                              defaultMessage=\"About You\"\r\n                            />\r\n                          </h4>\r\n                          <p className=\"mb-30\">\r\n                            <FormattedMessage\r\n                              id=\"form_about_you_lable\"\r\n                              defaultMessage=\"Write a little bit about yourself\"\r\n                            />\r\n                          </p>\r\n                        </NFTtitle>\r\n                        <NFTForm>\r\n                        <FormattedMessage\r\n                            id=\"type_something\"\r\n                            defaultMessage=\"Type something…\"\r\n                          >\r\n                            {(placeholder) => (\r\n                              <textarea\r\n                                type=\"textarea\"\r\n                                name=\"bio\"\r\n                                placeholder=\"0\"\r\n                                onKeyPress={(e) => {\r\n                                  if (e.key === \"Enter\") {\r\n                                    e.preventDefault();\r\n                                  }\r\n                                }}\r\n                                defaultValue={\r\n                                  profile ? (profile.bio ? profile.bio : \"\") : \"\"\r\n                                }\r\n                                placeholder={placeholder}\r\n                              />\r\n                            )}\r\n                          </FormattedMessage>\r\n                        </NFTForm>\r\n                      </div>\r\n                      {/* <div id='verifyProfile'>\r\n                        <NFTtitle>\r\n                          <h4 className='mt-30'>\r\n                            <FormattedMessage\r\n                              id='verify_profile'\r\n                              defaultMessage='Verify your profile'\r\n                            />\r\n                          </h4>\r\n                          <p className='mb-30'>\r\n                            <FormattedMessage\r\n                              id='verify_profile_label'\r\n                              defaultMessage='Show us how authentic your profile is'\r\n                            />\r\n                          </p>\r\n                        </NFTtitle>\r\n                        <NFTForm>\r\n                          <CustomCheckbox1>\r\n                            <label className='checkbox-container'>\r\n                              <img src={CICON01} alt='' />\r\n                              <FormattedMessage\r\n                                id='verify_twitter'\r\n                                defaultMessage='Verify via Twitter'\r\n                              />\r\n                              <input\r\n                                onChange={(e) => {\r\n                                  if (e.target.checked) {\r\n                                    this.setState({ loading: true });\r\n                                    this.props.getTwitterAccessToken();\r\n                                  }\r\n                                }}\r\n                                checked={profile?.portfolio.twitter.isVerified}\r\n                                type='checkbox'\r\n                                name=''\r\n                                value='twitter'\r\n                              />\r\n                              <span className='checkmark v2'></span>\r\n                            </label>\r\n                            <label className='checkbox-container'>\r\n                              {!profile?.portfolio.instagarm.isVerified ? (\r\n                                <InstagramLogin\r\n                                  cssClass='background: none;'\r\n                                  clientId={client_id}\r\n                                  buttonText='Login'\r\n                                  redirectUri={redirect_url}\r\n                                  scope={['user_profile']}\r\n                                  onSuccess={this.onInstagramSuccess}\r\n                                  onFailure={this.onInstagramFailure}\r\n                                >\r\n                                  <img src={CICON02} alt='' />\r\n                                  <FormattedMessage\r\n                                    id='verify_instagram'\r\n                                    defaultMessage='Verify via Instagram'\r\n                                  />\r\n                                  <input\r\n                                    type='checkbox'\r\n                                    checked={\r\n                                      profile?.portfolio.instagarm.isVerified\r\n                                    }\r\n                                    name=''\r\n                                    value='intagram'\r\n                                  />\r\n                                  <span className='checkmark v2'></span>\r\n                                </InstagramLogin>\r\n                              ) : (\r\n                                <>\r\n                                  <img src={CICON02} alt='' />\r\n                                  <FormattedMessage\r\n                                    id='verify_instagram'\r\n                                    defaultMessage='Verify via Instagram'\r\n                                  />\r\n                                  <input\r\n                                    type='checkbox'\r\n                                    checked={\r\n                                      profile?.portfolio.instagarm.isVerified\r\n                                    }\r\n                                    name=''\r\n                                    value='intagram'\r\n                                  />\r\n                                  <span className='checkmark v2'></span>\r\n                                </>\r\n                              )}\r\n                            </label>\r\n                          </CustomCheckbox1>\r\n                        </NFTForm>\r\n                      </div> */}\r\n                      <div id=\"socialLink\">\r\n                        <NFTtitle>\r\n                          <h4 className=\"mt-30\">\r\n                            <FormattedMessage\r\n                              id=\"social_links\"\r\n                              defaultMessage=\"Social Links\"\r\n                            />\r\n                          </h4>\r\n                          <p className=\"mb-30\">\r\n                            <FormattedMessage\r\n                              id=\"social_links_label\"\r\n                              defaultMessage=\"Add your social media links for people to follow\"\r\n                            />\r\n                          </p>\r\n                        </NFTtitle>\r\n\r\n                        <NFTForm>\r\n                          <div className=\"label-line\">\r\n                            <label>\r\n                              <FormattedMessage\r\n                                id=\"website\"\r\n                                defaultMessage=\"Website\"\r\n                              />\r\n                            </label>\r\n                          </div>\r\n                          <div className=\"iLeft\">\r\n                            <i>\r\n                              <img src={CICON03} alt=\"\" />\r\n                            </i>\r\n                            <FormattedMessage\r\n                              id=\"type_something\"\r\n                              defaultMessage=\"Type something…\"\r\n                            >\r\n                              {(placeholder) => (\r\n                                <input\r\n                                  type=\"url\"\r\n                                  name=\"website\"\r\n                                  onKeyPress={(e) => {\r\n                                    if (e.key === \"Enter\") {\r\n                                      e.preventDefault();\r\n                                    }\r\n                                  }}\r\n                                  defaultValue={\r\n                                    profile\r\n                                      ? profile.portfolio?.website\r\n                                        ? profile.portfolio.website.url\r\n                                        : \"\"\r\n                                      : \"\"\r\n                                  }\r\n                                  placeholder={placeholder}\r\n                                />\r\n                              )}\r\n                            </FormattedMessage>\r\n                          </div>\r\n                        </NFTForm>\r\n                        <NFTForm>\r\n                          <div className=\"label-line\">\r\n                            <label>Twitter</label>\r\n                          </div>\r\n                          <div className=\"iLeft\">\r\n                            <i>\r\n                              <img src={CICON01} alt=\"\" />\r\n                            </i>\r\n                            <FormattedMessage\r\n                              id=\"type_something\"\r\n                              defaultMessage=\"Type something…\"\r\n                            >\r\n                              {(placeholder) => (\r\n                                <input\r\n                                  type=\"url\"\r\n                                  name=\"twitter\"\r\n                                  onKeyPress={(e) => {\r\n                                    if (e.key === \"Enter\") {\r\n                                      e.preventDefault();\r\n                                    }\r\n                                  }}\r\n                                  defaultValue={\r\n                                    profile\r\n                                      ? profile.portfolio?.twitter\r\n                                        ? profile.portfolio.twitter.url\r\n                                        : \"\"\r\n                                      : \"\"\r\n                                  }\r\n                                  placeholder={placeholder}\r\n                                />\r\n                              )}\r\n                            </FormattedMessage>\r\n                          </div>\r\n                        </NFTForm>\r\n                        <NFTForm>\r\n                          <div className=\"label-line\">\r\n                            <label>Instagram</label>\r\n                          </div>\r\n                          <div className=\"iLeft\">\r\n                            <i>\r\n                              <img src={CICON02} alt=\"\" />\r\n                            </i>\r\n                            <FormattedMessage\r\n                              id=\"type_something\"\r\n                              defaultMessage=\"Type something…\"\r\n                            >\r\n                              {(placeholder) => (\r\n                                <input\r\n                                  type=\"url\"\r\n                                  name=\"instagarm\"\r\n                                  onKeyPress={(e) => {\r\n                                    if (e.key === \"Enter\") {\r\n                                      e.preventDefault();\r\n                                    }\r\n                                  }}\r\n                                  defaultValue={\r\n                                    profile\r\n                                      ? profile.portfolio?.instagarm\r\n                                        ? profile.portfolio.instagarm.url\r\n                                        : \"\"\r\n                                      : \"\"\r\n                                  }\r\n                                  placeholder={placeholder}\r\n                                />\r\n                              )}\r\n                            </FormattedMessage>\r\n                          </div>\r\n                        </NFTForm>\r\n\r\n                        <NFTForm>\r\n                          <div className=\"label-line\">\r\n                            <label>Discord</label>\r\n                          </div>\r\n                          <div className=\"iLeft\">\r\n                            <i>\r\n                              <img src={CICON04} alt=\"\" />\r\n                            </i>\r\n                            <FormattedMessage\r\n                              id=\"type_something\"\r\n                              defaultMessage=\"Type something…\"\r\n                            >\r\n                              {(placeholder) => (\r\n                                <input\r\n                                  type=\"url\"\r\n                                  name=\"discord\"\r\n                                  onKeyPress={(e) => {\r\n                                    if (e.key === \"Enter\") {\r\n                                      e.preventDefault();\r\n                                    }\r\n                                  }}\r\n                                  defaultValue={\r\n                                    profile\r\n                                      ? profile.portfolio?.discord\r\n                                        ? profile.portfolio.discord.url\r\n                                        : \"\"\r\n                                      : \"\"\r\n                                  }\r\n                                  placeholder={placeholder}\r\n                                />\r\n                              )}\r\n                            </FormattedMessage>\r\n                          </div>\r\n                        </NFTForm>\r\n                        <NFTForm>\r\n                          <div className=\"label-line\">\r\n                            <label>\r\n                              <FormattedMessage\r\n                                id=\"youtube\"\r\n                                defaultMessage=\"YouTube\"\r\n                              />\r\n                            </label>\r\n                          </div>\r\n                          <div className=\"iLeft\">\r\n                            <i>\r\n                              <img src={CICON05} alt=\"\" />\r\n                            </i>\r\n                            <FormattedMessage\r\n                              id=\"type_something\"\r\n                              defaultMessage=\"Type something…\"\r\n                            >\r\n                              {(placeholder) => (\r\n                                <input\r\n                                  type=\"url\"\r\n                                  name=\"youtube\"\r\n                                  onKeyPress={(e) => {\r\n                                    if (e.key === \"Enter\") {\r\n                                      e.preventDefault();\r\n                                    }\r\n                                  }}\r\n                                  defaultValue={\r\n                                    profile\r\n                                      ? profile.portfolio?.youtube\r\n                                        ? profile.portfolio.youtube.url\r\n                                        : \"\"\r\n                                      : \"\"\r\n                                  }\r\n                                  placeholder={placeholder}\r\n                                />\r\n                              )}\r\n                            </FormattedMessage>\r\n                          </div>\r\n                        </NFTForm>\r\n                        <NFTForm>\r\n                          <div className=\"label-line\">\r\n                            <label>Facebook</label>\r\n                          </div>\r\n                          <div className=\"iLeft\">\r\n                            <i>\r\n                              <img src={CICON06} alt=\"\" />\r\n                            </i>\r\n                            <FormattedMessage\r\n                              id=\"type_something\"\r\n                              defaultMessage=\"Type something…\"\r\n                            >\r\n                              {(placeholder) => (\r\n                                <input\r\n                                  type=\"url\"\r\n                                  name=\"facebook\"\r\n                                  onKeyPress={(e) => {\r\n                                    if (e.key === \"Enter\") {\r\n                                      e.preventDefault();\r\n                                    }\r\n                                  }}\r\n                                  defaultValue={\r\n                                    profile\r\n                                      ? profile.portfolio?.facebook\r\n                                        ? profile.portfolio.facebook.url\r\n                                        : \"\"\r\n                                      : \"\"\r\n                                  } \r\n                                  placeholder={placeholder}\r\n                                />\r\n                              )}\r\n                            </FormattedMessage>\r\n                          </div>\r\n                        </NFTForm>\r\n                      </div>\r\n                      <CreateItemButton>\r\n                        <button\r\n                          type=\"submit\"\r\n                          disabled={!formChange ? true : false}\r\n                        >\r\n                          <FormattedMessage\r\n                            id=\"profile_update_button_label\"\r\n                            defaultMessage=\"Save Changes\"\r\n                          />\r\n                        </button>\r\n                      </CreateItemButton>\r\n                    </form>\r\n                  </NFTMiddle>\r\n                </Gs.W605px>\r\n              </Gs.W880px>\r\n            </NFTminting>\r\n          </Gs.Container>\r\n        </div>\r\n      </Gs.MainSection>\r\n    );\r\n  }\r\n}\r\n// Common Style Div\r\nconst FlexDiv = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  .JCSB {\r\n    justify-content: space-between;\r\n  }\r\n`;\r\n\r\nconst NFTminting = styled(FlexDiv)`\r\n  align-items: flex-start;\r\n  position: relative;\r\n  margin: 60px 0px;\r\n  .sticky {\r\n    top: 20px !important;\r\n  }\r\n  .displayflex {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n  }\r\n`;\r\n\r\nconst NFTLeft = styled.div`\r\n  margin: 0px 10px;\r\n  ul {\r\n    padding-left: 0px;\r\n    margin: 0px;\r\n  }\r\n  .active {\r\n    color: #000000;\r\n    font-size: 18px;\r\n    font-weight: 700;\r\n    letter-spacing: -0.8px;\r\n    margin: 0px 0px 15px;\r\n    border-bottom: 3px solid #000;\r\n    padding-bottom: 5px;\r\n    display: inline-block;\r\n  }\r\n  a {\r\n    display: block;\r\n    margin: 0px 0px 22px;\r\n    font-size: 18px;\r\n    color: rgb(0 0 0 / 30%);\r\n    font-weight: 600;\r\n    letter-spacing: -0.8px;\r\n    :hover {\r\n      color: rgb(0 0 0 / 60%);\r\n    }\r\n    &.AdminLink {\r\n      color: rgb(0 186 188 / 30%);\r\n      :hover {\r\n        color: rgb(0 186 188 / 60%);\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst NFTRight = styled.div`\r\n  margin: 0px 10px;\r\n`;\r\n\r\nconst NFTtitle = styled.div`\r\n  h4 {\r\n    color: #000000;\r\n    font-size: 24px;\r\n    font-weight: 700;\r\n    letter-spacing: -1.07px;\r\n    margin: 0px 0px 9px;\r\n    &.mt-30 {\r\n      margin-top: 30px;\r\n      ${Media.sm} {\r\n        margin-top: 10px;\r\n      }\r\n    }\r\n    &.text-till-blue {\r\n      color: #00babc;\r\n    }\r\n  }\r\n  p {\r\n    color: #000000;\r\n    font-size: 16px;\r\n    letter-spacing: -0.8px;\r\n    margin: 0px 0px 20px;\r\n    &.mb-30 {\r\n      margin-bottom: 30px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst NFTfourbox = styled(FlexDiv)`\r\n  img.main {\r\n    width: 100%;\r\n    border-top-left-radius: 10px;\r\n    border-top-right-radius: 10px;\r\n  }\r\n  .NFT-home-box {\r\n    border-radius: 10px;\r\n    border: 1px solid #dddddd;\r\n    .NFT-home-box-inner {\r\n      padding: 20px 15px;\r\n      h4 {\r\n        margin: 0px 0px 10px;\r\n        font-size: 18px;\r\n        color: #000000;\r\n        font-weight: 600;\r\n        line-height: 22px;\r\n        letter-spacing: -0.67px;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n        -webkit-line-clamp: 2;\r\n        display: -webkit-box;\r\n        -webkit-box-orient: vertical;\r\n        min-height: 44px;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nGs.W25V2 = styled(Gs.W25V2)`\r\n  ${NFTfourbox}.nftnift & {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nGs.TenpxGutter = styled(Gs.TenpxGutter)`\r\n  ${NFTfourbox}.nftnift & {\r\n    margin: 0px;\r\n  }\r\n`;\r\n\r\nGs.W605px = styled(Gs.W605px)`\r\n  ${NFTminting} & {\r\n    ${Media.lg} {\r\n      max-width: 100%;\r\n    }\r\n  }\r\n`;\r\nconst NFTMiddle = styled.div`\r\n  margin: 0px 40px;\r\n  ${Media.lg} {\r\n    margin: 0px 15px;\r\n  }\r\n  ${Media.sm} {\r\n    margin: 0px;\r\n  }\r\n`;\r\n\r\nconst NFTForm = styled.div`\r\n  position: relative;\r\n  .label-line {\r\n    margin: 0px 0px 6px;\r\n    label {\r\n      font-size: 16px;\r\n      color: #8e9194;\r\n      letter-spacing: -0.8px;\r\n      font-weight: 600;\r\n    }\r\n    span {\r\n      color: #8e9194;\r\n      font-size: 12px;\r\n      letter-spacing: -0.6px;\r\n      margin-left: 6px;\r\n    }\r\n    p {\r\n      color: #8e9194;\r\n      font-size: 14px;\r\n      letter-spacing: -0.7px;\r\n      font-weight: 300;\r\n      margin: 0px;\r\n    }\r\n  }\r\n  input,\r\n  select {\r\n    width: 100%;\r\n    height: 54px;\r\n    border: 1px solid #dddddd;\r\n    border-radius: 10px;\r\n    padding: 15px;\r\n    font-size: 18px;\r\n    font-weight: 600;\r\n    color: #000000;\r\n    letter-spacing: -0.9px;\r\n    margin: 0px 0px 30px;\r\n    ::placeholder {\r\n      color: #000;\r\n      opacity: 20%;\r\n    }\r\n  }\r\n  textarea {\r\n    width: 100%;\r\n    height: 110px;\r\n    border: 1px solid #dddddd;\r\n    border-radius: 10px;\r\n    padding: 15px;\r\n    font-size: 18px;\r\n    font-weight: 600;\r\n    color: #000000;\r\n    letter-spacing: -0.9px;\r\n    margin: 0px 0px 30px;\r\n    ::placeholder {\r\n      color: #000;\r\n      opacity: 20%;\r\n    }\r\n  }\r\n  .iLeft {\r\n    position: relative;\r\n    i {\r\n      position: absolute;\r\n      left: 15px;\r\n      top: 16px;\r\n      font-size: 18px;\r\n      color: #000;\r\n      font-weight: bold;\r\n      img {\r\n        position: relative;\r\n        left: -7px;\r\n        top: -4px;\r\n      }\r\n    }\r\n    input {\r\n      padding-left: 45px;\r\n    }\r\n  }\r\n  .iRight {\r\n    position: relative;\r\n    i {\r\n      position: absolute;\r\n      right: 15px;\r\n      top: 17px;\r\n      font-size: 18px;\r\n      color: #000;\r\n      font-weight: bold;\r\n    }\r\n    input {\r\n      padding-right: 45px;\r\n    }\r\n  }\r\n  .errorinput {\r\n    position: relative;\r\n    input {\r\n      border-color: #ff2a44;\r\n    }\r\n    p.error {\r\n      color: #ff2a44;\r\n      font-size: 12px;\r\n      letter-spacing: -0.6px;\r\n      font-weight: 600;\r\n      margin: 0px;\r\n      position: absolute;\r\n      top: 18px;\r\n      right: 15px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst FileuploadBox = styled(FlexDiv)`\r\n  border: 1px solid #dddddd;\r\n  border-radius: 10px;\r\n  width: 100%;\r\n  height: 100px;\r\n  margin: 0px 0px 60px;\r\n  input {\r\n    display: none;\r\n  }\r\n  .custom-file-upload {\r\n    border: 1px solid #000000;\r\n    border-radius: 15px;\r\n    font-size: 14px;\r\n    color: #000;\r\n    letter-spacing: -0.5px;\r\n    padding: 13px 28px;\r\n    cursor: pointer;\r\n    :hover {\r\n      background-color: #000;\r\n      color: #fff;\r\n    }\r\n  }\r\n`;\r\n\r\nconst CreateItemButton = styled.div`\r\n  margin: 50px 0px 80px;\r\n  button {\r\n    font-size: 14px;\r\n    color: #fff;\r\n    letter-spacing: -0.5px;\r\n    padding: 13px 60px;\r\n    cursor: pointer;\r\n    border-radius: 15px;\r\n    background-color: rgb(0 0 0 / 30%);\r\n    :hover {\r\n      background-color: #000;\r\n    }\r\n  }\r\n  ${Media.sm} {\r\n    margin: 30px 0px 40px;\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nconst CustomRadio1 = styled(FlexDiv)`\r\n  justify-content: flex-start;\r\n  margin-bottom: 30px;\r\n  .radio-container {\r\n    display: flex;\r\n    align-items: center;\r\n    position: relative;\r\n    height: 54px;\r\n    width: calc(170px - 5px);\r\n    margin-right: 10px;\r\n    cursor: pointer;\r\n    padding-left: 15px;\r\n    line-height: 54px;\r\n    font-weight: 700;\r\n    font-size: 18px;\r\n    letter-spacing: -0.9px;\r\n    color: #000;\r\n    img {\r\n      margin-right: 5px;\r\n    }\r\n  }\r\n  .radio-container input {\r\n    position: absolute;\r\n    left: 0;\r\n    opacity: 0;\r\n    cursor: pointer;\r\n    margin: 0px;\r\n  }\r\n  .checkmark {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    height: 54px;\r\n    width: 100%;\r\n    background-color: transparent;\r\n    border-radius: 10px;\r\n    border: 1px solid #dddddd;\r\n  }\r\n  .radio-container input:checked ~ .checkmark {\r\n    border: 1px solid #00babc;\r\n  }\r\n`;\r\n\r\nconst CustomCheckbox1 = styled(FlexDiv)`\r\n  justify-content: flex-start;\r\n  margin-bottom: 30px;\r\n  .checkbox-container {\r\n    display: flex;\r\n    align-items: center;\r\n    position: relative;\r\n    height: 54px;\r\n    width: calc(257px - 5px);\r\n    margin-right: 10px;\r\n    cursor: pointer;\r\n    padding-left: 15px;\r\n    line-height: 54px;\r\n    font-weight: 700;\r\n    font-size: 18px;\r\n    letter-spacing: -0.9px;\r\n    color: #000;\r\n    button {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: flex-start;\r\n      padding: 0px;\r\n      letter-spacing: -0.9px;\r\n      font-weight: 700;\r\n      :hover {\r\n        background-color: transparent !important;\r\n      }\r\n    }\r\n    img {\r\n      margin-right: 5px;\r\n    }\r\n    ${Media.lg} {\r\n      margin: 0px 10px 10px 0px;\r\n    }\r\n  }\r\n  .checkbox-container input {\r\n    position: absolute;\r\n    left: 0;\r\n    opacity: 0;\r\n    cursor: pointer;\r\n    margin: 0px;\r\n  }\r\n  .checkbox-container button:hover {\r\n    background-color: #f7f7f7;\r\n  }\r\n  .checkmark {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    height: 54px;\r\n    width: 100%;\r\n    background-color: transparent;\r\n    border-radius: 10px;\r\n    border: 1px solid #dddddd;\r\n  }\r\n  .checkmark.v2:hover {\r\n    border: 1px solid #00babc;\r\n  }\r\n  .checkbox-container input:checked ~ .checkmark {\r\n    border: 1px solid #00babc;\r\n  }\r\n`;\r\n\r\nconst CollectionSelect = styled(FlexDiv)`\r\n  margin-bottom: 60px;\r\n  position: relative;\r\n  select {\r\n    margin-bottom: 0px;\r\n    -webkit-appearance: none;\r\n    background: url(${DDdownA}) no-repeat 97% 55%;\r\n    option {\r\n      border-radius: 10px;\r\n      box-shadow: 0 10px 20px 0 rgb(0 0 0 / 30%);\r\n      margin: 30px;\r\n    }\r\n  }\r\n  button {\r\n    font-size: 14px;\r\n    letter-spacing: -0.5px;\r\n    color: #000;\r\n    font-weight: 700;\r\n    border-radius: 15px;\r\n    border: 1px solid #000000;\r\n    padding: 16px 20px;\r\n    margin-left: 10px;\r\n    :hover {\r\n      background-color: #000;\r\n      color: #fff;\r\n    }\r\n  }\r\n`;\r\n\r\nconst AccountBX = styled(FlexDiv)`\r\n  position: absolute;\r\n  top: 37px;\r\n  right: 0px;\r\n  width: auto;\r\n  justify-content: flex-end;\r\n  padding: 8px 10px;\r\n  z-index: 101;\r\n  cursor: pointer;\r\n  & i {\r\n    width: 50px;\r\n    height: 50px;\r\n    overflow: hidden;\r\n    img {\r\n      width: 100%;\r\n      height: 100%;\r\n    }\r\n  }\r\n  & span {\r\n    font-size: 18px;\r\n    letter-spacing: -0.9px;\r\n    font-weight: 700;\r\n    color: #000;\r\n    display: block;\r\n    text-align: right;\r\n    line-height: 16px;\r\n    padding-right: 8px;\r\n    span {\r\n      font-size: 10px;\r\n      color: #b3b3b3;\r\n      width: 100%;\r\n      padding-right: 0;\r\n    }\r\n  }\r\n`;\r\n\r\nconst DDBtnbar02 = styled(FlexDiv)`\r\n  width: 100%;\r\n  button {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 100%;\r\n    height: 45px;\r\n    font-size: 16px;\r\n    font-weight: 600;\r\n    border-bottom: 1px solid #eef2f7;\r\n    & i {\r\n      width: 34px;\r\n      height: 34px;\r\n      margin: 0 8px;\r\n      overflow: hidden;\r\n      img {\r\n        width: 100%;\r\n        height: 100%;\r\n      }\r\n    }\r\n    & span {\r\n      margin-left: auto;\r\n    }\r\n    &:nth-last-child(01) {\r\n      border-bottom: 0px;\r\n    }\r\n    &:hover {\r\n      background-color: #d9f5f5;\r\n    }\r\n  }\r\n`;\r\n\r\nconst DDContainer = styled(FlexDiv)`\r\n  position: absolute;\r\n  background-color: #fff;\r\n  padding: 15px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 10px 20px 0 rgba(0, 0, 0, 0.3);\r\n  top: calc(100% + 30px);\r\n  width: 200px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  overflow: hidden;\r\n  z-index: 100;\r\n  &.ver2 {\r\n    width: 150px;\r\n    left: auto;\r\n    transform: translateX(0);\r\n    right: 0;\r\n    top: calc(100% + 20px);\r\n    padding: 0;\r\n  }\r\n`;\r\n\r\nconst BackBTN01 = styled.button`\r\n  border: 1px solid #000000;\r\n  border-radius: 10px;\r\n  padding: 0 30px;\r\n  height: 44px;\r\n  margin: 60px 0 0 6px;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  letter-spacing: -0.5px;\r\n`;\r\nconst LoaderBX = styled(FlexDiv)`\r\n  width: 100%;\r\n  margin: 60px auto 0 auto;\r\n`;\r\n\r\nconst OnbTitle01 = styled.div`\r\n  font-size: 26px;\r\n  font-weight: 600;\r\n  color: #000;\r\n  margin-bottom: 15px;\r\n\r\n  &.v2 {\r\n    max-width: 220px;\r\n    margin: 0 auto;\r\n    text-align: center;\r\n    line-height: 28px;\r\n  }\r\n`;\r\nconst OnbText01 = styled.div`\r\n  font-size: 14px;\r\n  font-weight: 400;\r\n  color: #000;\r\n  letter-spacing: -0.5px;\r\n\r\n  &.w100 {\r\n    width: 100%;\r\n  }\r\n`;\r\nconst BlackWrap = styled(FlexDiv)`\r\n  position: fixed;\r\n  left: 0;\r\n  right: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.6);\r\n  z-index: 101;\r\n  backdrop-filter: blur(2px);\r\n`;\r\nconst WhiteBX01 = styled(FlexDiv)`\r\n  width: 100%;\r\n  position: relative;\r\n  max-width: 400px;\r\n  margin: 0 15px;\r\n  min-height: 418px;\r\n  padding: 50px;\r\n  background-color: #fff;\r\n  border-radius: 30px;\r\n  justify-content: flex-start;\r\n  align-content: center;\r\n  ${Media.xs} {\r\n    padding: 50px 25px;\r\n  }\r\n`;\r\nconst CloseBTN = styled.button`\r\n  width: 20px;\r\n  height: 20px;\r\n  position: absolute;\r\n  right: 20px;\r\n  top: 27px;\r\n  padding: 0;\r\n  margin: 0px;\r\n  :hover {\r\n    transform: rotate(90deg);\r\n  }\r\n  ${Media.xs} {\r\n    right: 15px;\r\n    top: 15px;\r\n  }\r\n`;\r\nconst AlertNote = styled.div`\r\n  background-color: #ffe5e9;\r\n  border: 1px solid #ff2a44;\r\n  border-radius: 10px;\r\n  margin: 0px 0px 40px;\r\n  padding: 17px 15px;\r\n  p {\r\n    margin: 0px;\r\n    color: #000000;\r\n    font-size: 16px;\r\n    font-weight: 600;\r\n    letter-spacing: -0.8px;\r\n  }\r\n`;\r\n\r\nconst mapDipatchToProps = (dispatch) => {\r\n  return {\r\n    getProfile: () => dispatch(actions.getProfile()),\r\n    setProfile: (params) => dispatch(actions.updateUserDetails(params)),\r\n    clearErrors: () => dispatch({ type: \"API_FAILED\", data: null }),\r\n    sendInstaCode: (code) => dispatch(actions.sendInstagramCode(code)),\r\n    getTwitterAccessToken: () => dispatch(actions.getTwitterAccessToken()),\r\n    verifyByTwitter: (token, verifier) =>\r\n      dispatch(actions.verifyByTwitter(token, verifier)),\r\n  };\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    profile: state.fetchProfile,\r\n    updated: state.updateProfile,\r\n    error: state.fetchResponseFailed,\r\n    verified_by_insta: state.verified_by_instagram,\r\n    access_token: state.fetch_twitter_access_token,\r\n    verified_by_twitter: state.verified_by_twitter,\r\n  };\r\n};\r\n\r\nexport default withRouter(\r\n  connect(mapStateToProps, mapDipatchToProps)(ProfileEdit)\r\n);\r\n"],"sourceRoot":""}